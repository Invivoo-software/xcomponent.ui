<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
                    xmlns:syncfusionshared="clr-namespace:Syncfusion.Windows.Shared;assembly=Syncfusion.Shared.WPF"
                    xmlns:gridcommon="clr-namespace:Syncfusion.Windows.Controls.Scroll;assembly=Syncfusion.GridCommon.WPF"
                    xmlns:suggest="clr-namespace:XComponent.Common.UI.Suggest;assembly=XComponent.Common.UI"
                    xmlns:syncfusiongrid="clr-namespace:Syncfusion.Windows.Controls.Grid;assembly=Syncfusion.Grid.Wpf"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:i18n="clr-namespace:XComponent.Common.UI.I18n;assembly=XComponent.Common.UI"
                    xmlns:controls="clr-namespace:Syncfusion.Windows.Controls;assembly=Syncfusion.Shared.Wpf"
                    xmlns:resources="clr-namespace:Syncfusion.Windows.Shared.Resources;assembly=Syncfusion.Shared.Wpf"
                    xmlns:primitives="clr-namespace:Syncfusion.Windows.Controls.Primitives;assembly=Syncfusion.Shared.Wpf"
                    xmlns:converters="clr-namespace:XComponent.Common.UI.Converter;assembly=XComponent.Common.UI">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                                                   Source="/Syncfusion.Shared.WPF;component/skinmanager/metrostyle.xaml" />
        <ResourceDictionary Source="/Syncfusion.Tools.WPF;component/controls/notifyicon/themes/metrostyle.xaml" />
        <ResourceDictionary Source="/Syncfusion.Shared.Wpf;component/controls/editors/themes/blendstyle.xaml" />
        <ResourceDictionary Source="/XComponent.Common.UI;component/Themes/Generic/AutoCompleteSearchTextBox.xaml" />
        
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="XComponentMainBrush" Color="{StaticResource XComponentActiveColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="XComponentSeparatorBrush" Color="{StaticResource XComponentXComponentSeparator}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentXComponentSeparatorBrush" Color="{StaticResource XComponentXComponentSeparator}"></SolidColorBrush>

    <SolidColorBrush x:Key="XComponentRibbonBackgroundBrush" Color="{StaticResource XComponentRibbonBackgroundColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentRibbonForegroundBrush" Color="{StaticResource XComponentRibbonForegroundColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentRibbonSeparatorBrush" Color="{StaticResource XComponentHighlightColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentIconBrush1" Color="{StaticResource XComponentIconColor1}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentIconBrush2" Color="{StaticResource XComponentIconColor2}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentIconBrush3" Color="{StaticResource XComponentIconColor3}"></SolidColorBrush>

    <SolidColorBrush x:Key="XComponentBackgroundBrush" Color="{StaticResource XComponentBackgroundColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentIconBrush" Color="{StaticResource XComponentIconColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="XComponentTextboxBrush" Color="{StaticResource XComponentTextboxColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentTextboxBorderBrush" Color="{StaticResource XComponentTextboxBorderColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentInactiveTextboxBrush" Color="{StaticResource XComponentInactiveTextboxColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="XComponentBorderBrush" Color="{StaticResource XComponentHighlightColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentWatermarkFontBrush" Color="{StaticResource XComponentWatermarkFontColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentInactiveFontBrush" Color="{StaticResource XComponentInactiveFontColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentPanelBackgroundBrush" Color="{StaticResource XComponentPanelBackgroundColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="XComponentHighlightBrush" Color="{StaticResource XComponentHighlightColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentFontBrush" Color="{StaticResource XComponentFontColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="TransparentBrush" Color="Transparent"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentSelectBrush" Color="{StaticResource XComponentSelectColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentGreyBrush" Color="{StaticResource XComponentGreyColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="UserIconBrush" Color="{StaticResource UserIconColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="PopupBackgroundBrush" Color="{StaticResource PopupBackgroundColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="ModernButtonText" Color="{StaticResource XComponentButtonColor}"/>
    <SolidColorBrush x:Key="ModernButtonBorder" Color="{StaticResource XComponentButtonColor}"/>
    <SolidColorBrush x:Key="ModernButtonBorderHover" Color="{StaticResource XComponentButtonHighlightColor}"/>
    <SolidColorBrush x:Key="ModernButtonTextHover" Color="{StaticResource XComponentButtonHighlightColor}"/>
    <SolidColorBrush x:Key="ModernButtonBorderPressed" Color="{StaticResource XComponentButtonHighlightColor}"/>
    <SolidColorBrush x:Key="ModernButtonIconForegroundPressed" Color="{StaticResource XComponentButtonColor}"/>
    <SolidColorBrush x:Key="ModernButtonTextPressed" Color="{StaticResource XComponentButtonColor}"/>
    <SolidColorBrush x:Key="ModernButtonIconBackgroundPressed" Color="{StaticResource XComponentButtonHighlightColor}"/>

    <SolidColorBrush x:Key="XComponentScrollbarBrush" Color="{StaticResource XComponentScrollbarColor}"/>
    <SolidColorBrush x:Key="XComponentScrollbarHoverBrush" Color="{StaticResource XComponentScrollbarHoverColor}"/>
    <SolidColorBrush x:Key="XComponentScrollbarDraggedBrush" Color="{StaticResource XComponentScrollbarDraggedColor}"/>

    <SolidColorBrush x:Key="MetroBrush" Color="{StaticResource XComponentActiveColor}"/>
    <SolidColorBrush x:Key="MetroHoverBrush" Color="{StaticResource XComponentHighlightColor}"/>
    <SolidColorBrush x:Key="MetroForegroundBrush" Color="{StaticResource XComponentFontColor}"/>
    <SolidColorBrush x:Key="MetroPanelBackgroundBrush" Color="{StaticResource XComponentPanelBackgroundColor}"/>
    <SolidColorBrush x:Key="MetroBackgroundBrush" Color="{StaticResource XComponentRibbonBackgroundColor}"/>
    <SolidColorBrush x:Key="XComponentGridHeaderBackgroundBrush" Color="{StaticResource XComponentGridHeaderBackgroundColor}"/>
    <SolidColorBrush x:Key="XComponentGridBackgroundBrush" Color="{StaticResource XComponentGridBackgroundColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentGridRowSelectBackgroundBrush" Color="{StaticResource XComponentGridRowSelectBackgroundColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentGridCellSelectBackgroundBrush" Color="{StaticResource XComponentGridCellSelectBackgroundColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentGridRowHoverBackgroundBrush" Color="{StaticResource XComponentGridRowHoverBackgroundColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="XComponentGridAlternatingRowBrush" Color="{StaticResource XComponentGridAlternatingRowColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="XComponentErrorBrush" Color="{StaticResource XComponentErrorColor}"/>
    <SolidColorBrush x:Key="XComponentGreenStatusBrush" Color="{StaticResource XComponentGreenStatusColor}"/>
    <SolidColorBrush x:Key="XComponentOrangeStatusBrush" Color="{StaticResource XComponentOrangeStatusColor}"/>

    <SolidColorBrush x:Key="XComponentTooltipBackgroundBrush" Color="{StaticResource XComponentTooltipBackgroundColor}"/>
    <SolidColorBrush x:Key="XComponentTooltipFontBrush" Color="{StaticResource XComponentTooltipFontColor}"/>
    <SolidColorBrush x:Key="XComponentTooltipBorderBrush" Color="{StaticResource XComponentTooltipBorderColor}"/>

    <SolidColorBrush x:Key="XComponentButtonBackgroundBrush" Color="{StaticResource XComponentButtonBackgroundColor}"/>
    <SolidColorBrush x:Key="XComponentButtonForegroundBrush" Color="{StaticResource XComponentButtonForegroundColor}"/>

    <SolidColorBrush x:Key="XComponentTitleBarIconBrush" Color="{StaticResource XComponentTitleBarIconColor}"/>
    <SolidColorBrush x:Key="XComponentTitleBarIconHoverBrush" Color="{StaticResource XComponentTitleBarIconHoverColor}"/>
    <SolidColorBrush x:Key="XComponentTitleBarIconBackgroundHoverBrush" Color="{StaticResource XComponentTitleBarIconBackgroundHoverColor}"/>
    <SolidColorBrush x:Key="XComponentTitleBarIconBackgroundPressedBrush" Color="{StaticResource XComponentTitleBarIconBackgroundPressedColor}"/>

    <SolidColorBrush x:Key="FloatingWindowsCloseForegroundBrush" Color="{StaticResource FloatingWindowsCloseForegroundColor}"/>
    <SolidColorBrush x:Key="FloatingWindowsCloseMouseoverForegroundBrush" Color="{StaticResource FloatingWindowsCloseMouseoverForegroundColor}"/>
    <SolidColorBrush x:Key="FloatingWindowsCloseMouseoverBackgroundBrush" Color="{StaticResource FloatingWindowsCloseMouseoverBackgroundColor}"/>

    <SolidColorBrush x:Key="FilterPopUpCloseForegroundBrush" Color="{StaticResource FilterPopUpCloseForegroundColor}"/>
    <SolidColorBrush x:Key="FilterPopUpCloseMouseoverForegroundBrush" Color="{StaticResource FilterPopUpCloseMouseoverForegroundColor}"/>
    <SolidColorBrush x:Key="FilterPopUpCloseMouseoverBackgroundBrush" Color="{StaticResource FilterPopUpCloseMouseoverBackgroundColor}"/>

    <SolidColorBrush x:Key="FilterPopUpBorderBrush" Color="{StaticResource FilterPopUpBorderColor}"/>
    <SolidColorBrush x:Key="FilterPopUpResizingBorderBrush" Color="{StaticResource FilterPopUpResizingBorderColor}"/>

    <SolidColorBrush x:Key="XComponentMenuItemCheckBoxPathBrush" Color="{StaticResource XComponentFontColor}"/>

    <SolidColorBrush x:Key="InstrumentModifiedColorBrush" Color="{StaticResource InstrumentModifiedColor}"/>

    <SolidColorBrush x:Key="XComponentExcelLikeFilterBackgroundBrush" Color="{StaticResource XComponentExcelLikeFilterBackgroundColor}"/>

    <FontFamily x:Key="MetroFontFamily">Segoe UI</FontFamily>

    <SolidColorBrush x:Key="ModernButtonColor" Color="DimGray"/>

    <Style x:Key="TitleBorder" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource XComponentMainColor}"/>
    </Style>

    <DataTemplate x:Key="WatermarkTemplate">
        <TextBlock Text="{Binding}" Opacity="0.5" FontStyle="Italic"/>
    </DataTemplate>

    <Thickness x:Key="BackstageMargin">10</Thickness>

    <SolidColorBrush x:Key="AutoCompleteHighlightBrush" Color="DeepSkyBlue"/>

    <Style TargetType="{x:Type syncfusion:PercentTextBox}" BasedOn="{StaticResource BlendPercentTextBoxStyle}">
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="WatermarkTextForeground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="PositiveForeground" Value="{StaticResource XComponentFontBrush}"></Setter>

        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"></Setter>
    </Style>

    <Style TargetType="{x:Type syncfusion:DoubleTextBox}" BasedOn="{StaticResource BlendDoubleTextBoxStyle}">
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="WatermarkTextForeground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="PositiveForeground" Value="{StaticResource XComponentFontBrush}"></Setter>

        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"></Setter>
    </Style>

    <Style TargetType="{x:Type syncfusion:IntegerTextBox}" BasedOn="{StaticResource BlendIntegerTextBoxStyle}">
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="WatermarkTextForeground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="PositiveForeground" Value="{StaticResource XComponentFontBrush}"></Setter>

        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"></Setter>
    </Style>

    <Style x:Key="MetroToolTipStyle" TargetType="{x:Type ToolTip}">
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource XComponentTooltipBorderBrush}"/>
        <Setter Property="Control.Background" Value="{StaticResource XComponentTooltipBackgroundBrush}"/>
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentTooltipFontBrush}"/>
        <Setter Property="Control.FontFamily" Value="{StaticResource MetroFontFamily}"/>
        <Setter Property="Control.FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Control.Padding" Value="5,2,5,2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Background="{TemplateBinding Control.Background}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Setter Property="Foreground" Value="{StaticResource XComponentTooltipFontBrush}"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type suggest:AutoCompleteSearchTextBox}" BasedOn="{StaticResource {x:Type suggest:AutoCompleteSearchTextBox}}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Background" Value="{StaticResource XComponentTextboxBrush}"/>
        <Setter Property="IconBrush" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource XComponentBorderBrush}"/>
        <Setter Property="SuggestBackgroundBrush" Value="{StaticResource PopupBackgroundBrush}"/>
        <Setter Property="SuggestHoverBrush" Value="{StaticResource XComponentHighlightBrush}"/>
        <Setter Property="SuggestSelectedBrush" Value="{StaticResource XComponentSelectBrush}"/>
    </Style>

    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="Padding" Value="0, 3, 0, 3"/>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{StaticResource XComponentTextboxBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource XComponentTextboxBorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource MetroFontFamily}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Bd" Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="1,2,2,2"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource XComponentSelectBrush}" Property="Control.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter Value="{StaticResource XComponentSelectBrush}" Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource XComponentInactiveTextboxBrush}" Property="Control.Background"/>
                            <Setter Value="{StaticResource XComponentInactiveFontBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="1,9"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="Background" Value="{StaticResource XComponentTextboxBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource XComponentTextboxBorderBrush}"/>
        <Setter Property="PasswordBox.PasswordChar" Value="●"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="Bd" Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="1,2,2,2"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource XComponentSelectBrush}" Property="Control.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter Value="{StaticResource XComponentSelectBrush}" Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource XComponentInactiveTextboxBrush}" Property="Control.Background"/>
                            <Setter Value="{StaticResource XComponentInactiveFontBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="1,9"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="XComponentWindow" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{StaticResource XComponentBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource XComponentTextboxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
    </Style>

    <Style TargetType="{x:Type Window}" BasedOn="{StaticResource XComponentWindow}"/>

    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MetroToolTipStyle}">
    </Style>

    <Style x:Key="MetroThemeComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Chrome1" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton"/>
                            </Grid.ColumnDefinitions>
                            <Border Name="Chrome" Background="{TemplateBinding Control.Background}" BorderThickness="1,0,0,0"
                      Margin="0" BorderBrush="{TemplateBinding Control.BorderBrush}" Grid.Column="1" Width="16">
                                <Path Name="Arrow" Fill="{DynamicResource MetroForegroundBrush}"
                      Data="{StaticResource DownArrowGeometry}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter TargetName="Arrow" Property="Path.Data" Value="M 0,0 L 7,7 14,0 Z"/>
                            <Setter TargetName="Chrome" Property="FrameworkElement.Width" Value="35"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="Chrome" Value="{DynamicResource MetroBrush}" Property="Border.Background"/>
                            <Setter TargetName="Chrome1"
                      Value="{StaticResource XComponentSelectBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="Arrow" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger SourceName="Chrome1" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Chrome"
                      Value="{StaticResource XComponentSelectBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                        <Trigger SourceName="Chrome" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Chrome" Value="{DynamicResource XComponentSelectBrush}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger SourceName="Chrome1" Property="UIElement.IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Chrome" Value="{DynamicResource MetroBrush}" Property="Border.Background"/>
                            <Setter TargetName="Chrome1"
                      Value="{StaticResource XComponentSelectBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Chrome" Value="{DynamicResource MetroBrush}" Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4,4,21,4" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2"
                     SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, FallbackValue=Stretch}"/>
        <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, FallbackValue=Stretch}"/>
        <Setter Property="Control.Padding" Value="3,1,3,0"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Background" Value="{StaticResource PopupBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource PopupBackgroundBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource XComponentFontBrush}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource MetroFontFamily}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Bd" CornerRadius="0" Background="Transparent" BorderBrush="Transparent"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter Margin="2" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.Column="1"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource XComponentHighlightBrush}" Property="Border.Background"/>
                            <Setter Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  TargetType="{x:Type ComboBox}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.FontFamily" Value="Segoe UI"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Control.Padding" Value="3,3,23,3"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" Grid.Column="2" Background="{TemplateBinding Control.Background}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}"
                          Style="{StaticResource MetroThemeComboBoxReadonlyToggleButton}" Focusable="false" ClickMode="Press"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center"
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                              IsHitTestVisible="false"/>
                        <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden"
                     Style="{StaticResource MetroThemeComboBoxEditableTextBox}" HorizontalAlignment="Left"
                     Margin="3,3,23,3" VerticalAlignment="Center" Focusable="true" Background="Transparent"
                     IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}"/>
                        <Popup x:Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom"
                   Focusable="false" AllowsTransparency="true" PopupAnimation="Slide">
                            <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource MetroBorderBrush}"
                      Background="{DynamicResource MetroPanelBackgroundBrush}" BorderThickness="1">
                                <Grid x:Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                      MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="true">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="true" HorizontalScrollBarVisibility="Auto"
                                VerticalScrollBarVisibility="Auto" CanContentScroll="true">
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    </ScrollViewer>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="true">
                            <Setter Property="Control.IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="Control.BorderThickness" Value="1"/>
                <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
                <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
                <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
                <Setter Property="Control.IsTabStop" Value="false"/>
                <Setter Property="Control.Padding" Value="3"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid>
                                <ToggleButton x:Name="ToggleButton" Grid.Column="2" Background="{TemplateBinding Control.Background}"
                              BorderBrush="{TemplateBinding Control.BorderBrush}"
                              Style="{StaticResource MetroThemeComboBoxReadonlyToggleButton}" Focusable="false" ClickMode="Press"
                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center"
                                  Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                  IsHitTestVisible="false"/>
                                <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden"
                         Style="{StaticResource MetroThemeComboBoxEditableTextBox}" HorizontalAlignment="Left"
                         Margin="3,3,23,3" VerticalAlignment="Center" Focusable="true" Background="Transparent"
                         IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}"/>
                                <Popup x:Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom"
                       Focusable="false" AllowsTransparency="true" PopupAnimation="Slide">
                                    <Grid x:Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                        MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="true">
                                        <Border x:Name="DropDownBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                            Background="{TemplateBinding Control.Background}" BorderThickness="1"/>
                                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="true" HorizontalScrollBarVisibility="Auto"
                                  VerticalScrollBarVisibility="Auto" CanContentScroll="true">
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                                    <Setter TargetName="ToggleButton" Value="{DynamicResource MetroBrush}" Property="Control.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="ItemsControl.HasItems" Value="false">
                                    <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                                </Trigger>
                                <Trigger Property="ItemsControl.IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                    <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
                                </Trigger>
                                <Trigger Property="ComboBox.IsEditable" Value="true">
                                    <Setter Property="Control.IsTabStop" Value="false"/>
                                    <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ScrollBarVerticalThumbxc" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.Width" Value="10"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Border FrameworkElement.Name="PART_RepeatThumb" BorderBrush="transparent"
                    BorderThickness="1" Background="{StaticResource XComponentScrollbarBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="PART_RepeatThumb" Value="{StaticResource XComponentScrollbarDraggedBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PART_RepeatThumb" Value="{StaticResource XComponentScrollbarHoverBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter TargetName="PART_RepeatThumb" Property="FrameworkElement.Width" Value="12"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarHorizontalThumbxc" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.Height" Value="10"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Border FrameworkElement.Name="PART_RepeatThumb" BorderBrush="transparent"
                    CornerRadius="0" BorderThickness="1" Background="{StaticResource XComponentScrollbarBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="PART_RepeatThumb" Value="{StaticResource XComponentScrollbarDraggedBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PART_RepeatThumb" Value="{StaticResource XComponentScrollbarHoverBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter TargetName="PART_RepeatThumb" Property="FrameworkElement.Width" Value="12"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Type ScrollViewer}}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Fill="{TemplateBinding Control.Background}" Grid.Column="1" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Control.Padding}" Grid.Column="0"
                                    Grid.Row="0" Content="{TemplateBinding ContentControl.Content}"
                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                    CanVerticallyScroll="false"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Width="12"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Cursor="Arrow"
                       Grid.Column="1" Grid.Row="0" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0"
                       AutomationProperties.AutomationId="VerticalScrollBar"
                       Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Height="12"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Cursor="Arrow"
                       Grid.Column="0" Grid.Row="1" Orientation="Horizontal"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0"
                       AutomationProperties.AutomationId="HorizontalScrollBar"
                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Type ScrollBar}}">
        <Setter Property="Control.Background" Value="transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentScrollbarBrush}"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="FrameworkElement.Width"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="FrameworkElement.MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0,0,1,0">
                        <Grid FrameworkElement.Name="Bg" Panel.Background="{TemplateBinding Control.Background}"
                  UIElement.SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                                <RowDefinition Height="0.00001*"/>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            </Grid.RowDefinitions>
                            <RepeatButton FrameworkElement.Name="UpButton" FrameworkElement.Style="{StaticResource ScrollBarUpButton}"
                            ButtonBase.Command="{x:Static ScrollBar.LineUpCommand}"/>
                            <Track FrameworkElement.Name="PART_Track" Grid.Row="1"
                     UIElement.IsEnabled="{TemplateBinding UIElement.IsMouseOver}" IsDirectionReversed="true">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton FrameworkElement.Style="{StaticResource VerticalScrollBarPageButton}"
                                ButtonBase.Command="{x:Static ScrollBar.PageUpCommand}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb FrameworkElement.Style="{StaticResource ScrollBarVerticalThumbxc}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton FrameworkElement.Style="{StaticResource VerticalScrollBarPageButton}"
                                ButtonBase.Command="{x:Static ScrollBar.PageDownCommand}"/>
                                </Track.IncreaseRepeatButton>
                            </Track>
                            <RepeatButton FrameworkElement.Name="DownButton" FrameworkElement.Style="{StaticResource ScrollBarDownButton}"
                            Grid.Row="2" ButtonBase.Command="{x:Static ScrollBar.LineDownCommand}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bg" Property="UIElement.Opacity" Value="0.7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                <Setter Property="FrameworkElement.Width" Value="Auto"/>
                <Setter Property="FrameworkElement.MinWidth" Value="0"/>
                <Setter Property="FrameworkElement.Height"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="FrameworkElement.MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="Control.Background" Value="Transparent"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid FrameworkElement.Name="Bg" Panel.Background="{TemplateBinding Control.Background}"
                    UIElement.SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <RepeatButton FrameworkElement.Name="LeftButton" FrameworkElement.Style="{StaticResource ScrollBarLeftButton}"
                              UIElement.IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                              ButtonBase.Command="{x:Static ScrollBar.LineLeftCommand}"/>
                                <Track FrameworkElement.Name="PART_Track" Grid.Column="1"
                       UIElement.IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton FrameworkElement.Style="{StaticResource HorizontalScrollBarPageButton}"
                                  ButtonBase.Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton FrameworkElement.Style="{StaticResource HorizontalScrollBarPageButton}"
                                  ButtonBase.Command="{x:Static ScrollBar.PageRightCommand}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb FrameworkElement.Style="{StaticResource ScrollBarHorizontalThumbxc}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton FrameworkElement.Name="RightButton" FrameworkElement.Style="{StaticResource ScrollBarRightButton}"
                              Grid.Column="2" UIElement.IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                              ButtonBase.Command="{x:Static ScrollBar.LineRightCommand}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="Bg" Property="UIElement.Opacity" Value="0.7"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="HeaderStyle" TargetType="{x:Type syncfusion:GridDataHeaderCellControl}">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}"/>
        <Setter Property="Background" Value="{StaticResource XComponentGridHeaderBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="HoverBackground" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}"/>
    </Style>


    <syncfusion:GridDataMinWidthConverter x:Key="MinWidthConverter" />
    <syncfusion:IsOpenConverter x:Key="isOpenConverter" />

    <Style x:Key="OptionButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="Transparent" SnapsToDevicePixels="True">
                        <Border.Child>
                            <Grid Width="16" Height="16">
                                <Path Data="F1 M 158.754,90.1889C 172.902,86.4597 172.829,80.6471 158.592,77.2722C 144.354,73.8971 141.204,62.7058 151.592,52.4012C 161.98,42.0964 159.01,37.099 144.993,41.2957C 130.976,45.4909 122.652,37.3738 126.496,23.2566C 130.34,9.13803 125.269,6.29437 115.228,16.9375C 105.187,27.5807 93.9199,24.7123 90.1894,10.5638C 86.459,-3.58463 80.6457,-3.51169 77.2715,10.7253C 73.8977,24.9636 62.7056,28.1133 52.4009,17.7253C 42.0963,7.33856 37.0989,10.3072 41.2948,24.3242C 45.4915,38.3412 37.3742,46.6654 23.2557,42.8216C 9.138,38.978 6.2948,44.0482 16.9375,54.0899C 27.58,64.1316 24.7121,75.3985 10.5638,79.129C -3.58466,82.8581 -3.51187,88.6706 10.7259,92.0457C 24.9635,95.4206 28.1132,106.612 17.7259,116.917C 7.33786,127.221 10.3072,132.219 24.3248,128.022C 38.3417,123.827 46.6653,131.944 42.8215,146.061C 38.9778,160.18 44.0488,163.023 54.0891,152.38C 64.1301,141.737 75.3977,144.606 79.1281,158.754C 82.8587,172.902 88.6718,172.829 92.0461,158.592C 95.4199,144.354 106.612,141.204 116.917,151.592C 127.221,161.98 132.219,159.01 128.023,144.994C 123.826,130.977 131.943,122.652 146.062,126.496C 160.18,130.34 163.023,125.27 152.38,115.228C 141.738,105.186 144.605,93.9193 158.754,90.1889 Z M 84.6595,111.376C 69.9029,111.376 57.9413,99.4141 57.9413,84.6588C 57.9413,69.9023 69.9029,57.9402 84.6595,57.9402C 99.4153,57.9402 111.377,69.9023 111.377,84.6588C 111.377,99.4141 99.4153,111.376 84.6595,111.376 Z "
                                      Fill="{Binding Path=Background,
                                                     Mode=OneWay,
                                                     RelativeSource={RelativeSource TemplatedParent}}"
                                      Stretch="Fill"
                                      Stroke="{Binding Path=BorderBrush,
                                                       Mode=OneWay,
                                                       RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </Border.Child>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridDataHeaderCellControlStyle2" TargetType="{x:Type syncfusion:GridDataHeaderCellControl}">
        <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}"/>
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}" Style="{StaticResource MetroToolTipStyle}" Content="{Binding Path=Tag}">
                </ToolTip>
            </Setter.Value>
        </Setter>
        <Setter Property="HoverBackground" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}"/>
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusion:GridDataHeaderCellControl}">
                    <Border Name="MainBorder"
                            Background="{StaticResource XComponentGridHeaderBackgroundBrush}"
                            BorderBrush="{TemplateBinding HeaderInnerBorderBrush}"
                            BorderThickness="0"
                            Padding="0"
                            SnapsToDevicePixels="True">
                        <Grid Name="MainGrid"
                              Width="{TemplateBinding Width}"
                              Height="{TemplateBinding Height}"
                              SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="0" MinWidth="{Binding Path=SortVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MinWidthConverter}}" />
                                <ColumnDefinition Width="0" MinWidth="{Binding Path=FilterButtonVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MinWidthConverter}}" />
                                <ColumnDefinition Width="0" MinWidth="{Binding Path=ColumnOptionsButtonVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MinWidthConverter}}" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="border"
                                    Grid.Row="0"
                                    Grid.Column="0"
                                    HorizontalAlignment="Stretch"
                                    Background="Transparent"
                                    SnapsToDevicePixels="True">
                                <TextBlock Name="PART_TextBlock"
                                           Margin="2,2,0,0"
                                           Padding="2,0,0,0"
                                           HorizontalAlignment="Stretch"
                                           VerticalAlignment="Center"
                                           Foreground="{StaticResource XComponentFontBrush}"
                                           OverridesDefaultStyle="False"
                                           SnapsToDevicePixels="True"
                                           Text="{TemplateBinding Text}"
                                           TextTrimming="CharacterEllipsis" />
                            </Border>
                            <Border x:Name="border1"
                                    Grid.Row="0"
                                    Grid.Column="1"
                                    Width="{x:Static syncfusion:GridDataHeaderCellControl.MinimumWidth}"
                                    Margin="0,0,0,1"
                                    Background="Transparent"                                    
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True"
                                    Visibility="{Binding Path=SortVisibility,
                                                         Mode=TwoWay,
                                                         RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="18" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Path Width="10.84"
                                          Height="9.87"
                                          Margin="5,0,0,0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="{TemplateBinding SortPath}"
                                          Fill="{TemplateBinding SortBrush}"
                                          SnapsToDevicePixels="True"
                                          Stretch="Fill" />
                                    <TextBlock Grid.Column="1"
                                               FontSize="10"
                                               Foreground="{TemplateBinding SortBrush}"
                                               Text="{TemplateBinding SortString}" />
                                </Grid>
                            </Border>
                            <!--  Set WantsMouseInput true so that the filter button will receive mouse events.  -->
                            <Border x:Name="border2"
                                    Grid.Row="0"
                                    Grid.Column="2"
                                    Margin="0,0,0,1"
                                    Background="Transparent"
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True">
                                <Grid>
                                    <syncfusion:GridDataFilterToggleButton Name="toggleButton"
                                                                           FilterAppliedInnerBrush="{TemplateBinding FilterAppliedInnerBrush}"
                                                                           FilterHoverInnerBrush="{TemplateBinding FilterHoverInnerBrush}"
                                                                           FilterHoverOuterBrush="{TemplateBinding FilterHoverOuterBrush}"
                                                                           FilterInnerBrush="{TemplateBinding FilterInnerBrush}"
                                                                           FilterOuterBrush="{TemplateBinding FilterOuterBrush}"
                                                                           gridcommon:VisualContainer.WantsMouseInput="True"
                                                                           IsChecked="{Binding Path=IsDropDownOpen,
                                                                                               Mode=TwoWay,
                                                                                               RelativeSource={RelativeSource TemplatedParent}}"
                                                                           IsFilterApplied="{TemplateBinding IsFilterApplied}"
                                                                           SnapsToDevicePixels="True"
                                                                           Visibility="{Binding Path=FilterButtonVisibility,
                                                                                                Mode=TwoWay,
                                                                                                RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Popup Name="PART_Popup"
                                           AllowsTransparency="true"
                                           Placement="Bottom"
                                           PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                           StaysOpen="False"
                                           Visibility="Visible">
                                        <Popup.IsOpen>
                                            <MultiBinding Converter="{StaticResource isOpenConverter}">
                                                <Binding Mode="TwoWay"
                                                         Path="IsDropDownOpen"
                                                         RelativeSource="{RelativeSource TemplatedParent}" />
                                                <Binding Mode="OneWay"
                                                         Path="IsAdvanceFiltering"
                                                         RelativeSource="{RelativeSource TemplatedParent}" />
                                            </MultiBinding>
                                        </Popup.IsOpen>
                                        <themes:SystemDropShadowChrome Name="Shdw"
                                                                      MinWidth="{Binding ElementName=MainGrid,
                                                                                         Path=ActualWidth}"
                                                                      MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                                                      Color="Transparent">
                                            <Grid>
                                                <Grid.Resources>
                                                    <ResourceDictionary>
                                                        <ResourceDictionary.MergedDictionaries>
                                                            <ResourceDictionary Source="/Syncfusion.Shared.WPF;component/SkinManager/ShinyRedStyle.xaml" />
                                                        </ResourceDictionary.MergedDictionaries>
                                                    </ResourceDictionary>
                                                </Grid.Resources>
                                                <Border x:Name="PART_DropDownBorder"
                                                        Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="1"
                                                        Visibility="Visible" />
                                            </Grid>

                                        </themes:SystemDropShadowChrome>
                                        <Popup.Style>
                                            <Style TargetType="{x:Type Popup}">
                                                <Setter Property="StaysOpen" Value="False" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_DropDownBorder}" Value="True">
                                                        <Setter Property="StaysOpen" Value="True" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_DropDownBorder}" Value="False">
                                                        <Setter Property="StaysOpen" Value="False" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Popup.Style>
                                    </Popup>
                                    <!--  ExcelLike Filtering  -->

                                    <syncfusion:GridDataExcelLikeFilterPane x:Name="PART_FilterDropDown" Style="{StaticResource {x:Type syncfusion:GridDataExcelLikeFilterPane}}"
                                                                            gridcommon:VisualContainer.WantsMouseInput="True"
                                                                            IsOpen="{Binding Path=IsDropDownOpen,
                                                                                             Mode=TwoWay,
                                                                                             RelativeSource={RelativeSource TemplatedParent}}"
                                                                            StaysOpen="{Binding IsChecked,
                                                                                                ElementName=toggleButton}"/>


                                </Grid>
                            </Border>
                            <Border x:Name="border3"
                                    Grid.Row="0"
                                    Grid.Column="3"
                                    Margin="0,0,1,1"
                                    Background="Transparent"
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True">
                                <Grid Background="Transparent">
                                    <ToggleButton Name="optionsButton"
                                                  Grid.Row="0"
                                                  Grid.Column="0"
                                                  Margin="2"
                                                  Background="{TemplateBinding ColumnOptionsButtonBackground}"
                                                  BorderBrush="{TemplateBinding ColumnOptionsButtonBorderBrush}"
                                                  gridcommon:VisualContainer.WantsMouseInput="True"
                                                  IsChecked="{Binding Path=IsColumnOptionsDropDownOpen,
                                                                      Mode=TwoWay,
                                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                                  Style="{StaticResource OptionButtonStyle}"
                                                  ToolTip="Show Column Options"
                                                  Visibility="{Binding Path=ColumnOptionsButtonVisibility,
                                                                       Mode=TwoWay,
                                                                       RelativeSource={RelativeSource TemplatedParent}}" />

                                </Grid>
                            </Border>
                            <Popup Name="PART_ColumnOptionsPopup"
                                   AllowsTransparency="True"
                                   IsOpen="{Binding Path=IsColumnOptionsDropDownOpen,
                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=optionsButton}"
                                   SnapsToDevicePixels="True"
                                   StaysOpen="False" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="true" />
                            <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true">
                            <Setter Property="Padding" Value="2" />
                            <Setter Property="IsTabStop" Value="false" />
                        </Trigger>

                        <Trigger SourceName="border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="MainBorder" Property="Background" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                        </Trigger>
                        <Trigger SourceName="border1" Property="IsMouseOver" Value="True">
                            <Setter TargetName="border1" Property="Background" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />

                            <Setter TargetName="border1" Property="BorderBrush" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                        </Trigger>

                        <Trigger SourceName="border2" Property="IsMouseOver" Value="True">
                            <Setter TargetName="border2" Property="Background" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                            <Setter TargetName="border2" Property="BorderBrush" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsAdvanceFiltering" Value="True">
                            <Setter TargetName="PART_FilterDropDown" Property="Visibility" Value="Collapsed" />
                        </Trigger>


                        <Trigger SourceName="toggleButton" Property="IsChecked" Value="True">
                            <Setter TargetName="border2" Property="Background" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                            <Setter TargetName="border2" Property="BorderBrush" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                        </Trigger>
                        <Trigger SourceName="border3" Property="IsMouseOver" Value="True">
                            <Setter TargetName="border3" Property="Background" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                            <Setter TargetName="border3" Property="BorderBrush" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />

                        </Trigger>
                        <Trigger SourceName="optionsButton" Property="IsChecked" Value="True">
                            <Setter TargetName="border3" Property="Background" Value="{StaticResource XComponentFontBrush}" />
                            <Setter TargetName="border3" Property="BorderBrush" Value="{StaticResource XComponentGridCellSelectBackgroundBrush}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <syncfusion:GridDataColumnStyle x:Key="MasterDetailsColumnStyle"  CellType="DataBoundTemplate" Background="{StaticResource XComponentGridBackgroundBrush}">
    </syncfusion:GridDataColumnStyle>


    <syncfusion:GridDataStyleManager x:Key="CustomGridDataStyleManager">
        <syncfusion:GridDataStyleManager.HeaderAppearence>
            <syncfusion:HeaderAppearence ColumnOptionsPopupBackground="{StaticResource XComponentGridHeaderBackgroundBrush}"
                                         HeaderBackgroundBrush="{StaticResource XComponentGridHeaderBackgroundBrush}"
                                         HeaderForegroundBrush="{StaticResource XComponentFontBrush}"
                                         HeaderHoverBackgroundBrush="{StaticResource XComponentGridCellSelectBackgroundBrush}"
                                         SortWidgetBrush="{StaticResource XComponentFontBrush}"
                                         >
                <syncfusion:HeaderAppearence.HeaderTextMargins>
                    <syncfusion:CellMarginsInfo Left="12" />
                </syncfusion:HeaderAppearence.HeaderTextMargins>
            </syncfusion:HeaderAppearence>
        </syncfusion:GridDataStyleManager.HeaderAppearence>
        <syncfusion:GridDataStyleManager.ValueCellAppearance>
            <syncfusion:ValueCellAppearance>
                <syncfusion:ValueCellAppearance.ValueCellBorders>
                    <syncfusion:CellBordersInfo  />
                </syncfusion:ValueCellAppearance.ValueCellBorders>
                <syncfusion:ValueCellAppearance.ValueTextMargins>
                    <syncfusion:CellMarginsInfo Bottom="2"
                                                Left="2"
                                                Right="2"
                                                Top="2" />
                </syncfusion:ValueCellAppearance.ValueTextMargins>
            </syncfusion:ValueCellAppearance>
        </syncfusion:GridDataStyleManager.ValueCellAppearance>
        <syncfusion:GridDataStyleManager.RowAppearence>
            <syncfusion:RowAppearence      
                                      GroupCaptionSelectionBackground="{StaticResource XComponentGridBackgroundBrush}"
                                      GroupCaptionSelectionForeground="{StaticResource XComponentFontBrush}"
                                      SummaryRowBackground="{StaticResource XComponentGridBackgroundBrush}"
                                      SummaryRowForeground="{StaticResource XComponentFontBrush}"
                                      HighlightSelectionBackground="{StaticResource XComponentGridRowSelectBackgroundBrush}"                                      
                                      CurrentCellSelectionBackground="{StaticResource XComponentGridCellSelectBackgroundBrush}"
                                      CurrentCellSelectionForeground="{StaticResource XComponentFontBrush}"
                                      HoveringRecordCellBackground="{StaticResource XComponentGridRowHoverBackgroundBrush}"
                                      HoveringRecordCellForeground="{StaticResource XComponentFontBrush}"/>
        </syncfusion:GridDataStyleManager.RowAppearence>
    </syncfusion:GridDataStyleManager >

    <Style  TargetType="{x:Type MenuItem}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="{StaticResource ForegroundBrush.Blue}"/>
        <Setter Property="Control.FontFamily" Value="Segoe UI"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid SnapsToDevicePixels="true" Margin="0,1,0,0">
                        <Rectangle Name="Bg" Fill="{TemplateBinding Control.Background}"
                       Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                        <Rectangle x:Name="InnerBorder" Margin="1" RadiusX="2" RadiusY="2"/>
                        <Grid Margin="-1,0,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="4"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="37"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="17"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Margin="1,0,6,0" VerticalAlignment="Center" ContentSource="Icon"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            <Border x:Name="GlyphPanel" CornerRadius="0" Margin="3,1,6,1" Width="16" Height="16" Visibility="Hidden"
                                    BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0">
                                <Path VerticalAlignment="Center" HorizontalAlignment="Center" FlowDirection="LeftToRight"
                                      SnapsToDevicePixels="true" Stroke="{StaticResource XComponentMenuItemCheckBoxPathBrush}"
                                      StrokeThickness="1.6" Data="{StaticResource ToolBarCheckmark}" Height="8" Stretch="Fill" Width="9"/>
                            </Border>
                            <ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Control.Padding}"
                                RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            <TextBlock Grid.Column="4" Text="{TemplateBinding MenuItem.InputGestureText}"
                         Margin="{TemplateBinding Control.Padding}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="Bg" Value="{StaticResource XComponentHighlightBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Bg" Value="{StaticResource BorderBrush.Office2003}" Property="Shape.Stroke"/>
                            <Setter Property="Control.Foreground" Value="{StaticResource XComponentFontBrush}"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                <Setter Property="Control.Padding" Value="7,2,8,3"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid SnapsToDevicePixels="true">
                                <Rectangle x:Name="OuterBorder" RadiusX="0" RadiusY="0"/>
                                <Rectangle Name="Bg" Margin="1" Fill="{TemplateBinding Control.Background}"
                           Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                                <Rectangle x:Name="InnerBorder" Margin="2"/>
                                <DockPanel>
                                    <ContentPresenter x:Name="Icon" Margin="4,0,8,0" VerticalAlignment="Center" ContentSource="Icon"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Border x:Name="GlyphPanel" Grid.Column="0" Visibility="Collapsed" Width="16" Height="16" CornerRadius="0"
                                            BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0">
                                        <Path Stroke="{StaticResource XComponentMenuItemCheckBoxPathBrush}" StrokeThickness="1.4">
                                            <Path.Data>
                                                <GeometryGroup>
                                                    <LineGeometry StartPoint="6 9" EndPoint="9 16"/>
                                                    <LineGeometry StartPoint="9 16" EndPoint="13 3"/>
                                                </GeometryGroup>
                                            </Path.Data>
                                        </Path>
                                    </Border>
                                    <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </DockPanel>
                                <Popup x:Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
                       Placement="Bottom" Focusable="false"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <themes:SystemDropShadowChrome FrameworkElement.Name="Shdw" Color="Transparent">
                                        <Border Background="{StaticResource MetroPanelBackgroundBrush}"
                            BorderBrush="{DynamicResource MetroBorderBrush}" BorderThickness="1" Grid.IsSharedSizeScope="true">
                                            <Grid Margin="0,0,0,0" IsSharedSizeScope="true">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Border BorderBrush="{StaticResource MetroThemeMenuPopupBorderBrush}" Grid.Column="0" Grid.ColumnSpan="1"
                                Background="Transparent" BorderThickness="0,0,1,0"/>
                                                <ScrollViewer CanContentScroll="true" Grid.ColumnSpan="2"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"
                                          Margin="2,1,2,2" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </Grid>
                                        </Border>
                                    </themes:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                                    <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                                    <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="Bg" Value="{StaticResource BorderBrush.Office2003}" Property="Shape.Stroke"/>
                                    <Setter TargetName="Bg" Value="{DynamicResource MetroBrush}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="White"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                                    <Setter TargetName="Bg" Value="{StaticResource ButtonBorderBrush.Office2003}" Property="Shape.Stroke"/>
                                    <Setter TargetName="Bg" Value="{DynamicResource MetroBrush}" Property="Shape.Fill"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                                    <Setter TargetName="Bg" Value="{StaticResource ButtonBorderBrush.Office2003}" Property="Shape.Stroke"/>
                                    <Setter TargetName="Bg" Value="{DynamicResource MetroBrush}" Property="Shape.Fill"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Property="UIElement.Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                <Setter Property="Control.Padding" Value="7,3,8,3"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid SnapsToDevicePixels="true">
                                <Rectangle x:Name="OuterBorder" RadiusX="0" RadiusY="0"/>
                                <Rectangle Name="Bg" Margin="0,1,0,0" Fill="{TemplateBinding Control.Background}"
                           Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                                <Rectangle x:Name="InnerBorder" Margin="2"/>
                                <DockPanel>
                                    <ContentPresenter x:Name="Icon" Margin="4,0,10,0" VerticalAlignment="Center" ContentSource="Icon"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Border x:Name="GlyphPanel" Grid.Column="0" Width="16" Height="16" CornerRadius="0" Visibility="Hidden"
                                            BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0">
                                        <Path Stroke="{StaticResource XComponentMenuItemCheckBoxPathBrush}" StrokeThickness="1.4">
                                            <Path.Data>
                                                <GeometryGroup>
                                                    <LineGeometry StartPoint="6 9" EndPoint="9 16"/>
                                                    <LineGeometry StartPoint="9 16" EndPoint="13 3"/>
                                                </GeometryGroup>
                                            </Path.Data>
                                        </Path>
                                    </Border>
                                    <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </DockPanel>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="Bg" Value="{StaticResource BorderBrush.Office2003}" Property="Shape.Stroke"/>
                                    <Setter TargetName="Bg" Value="{DynamicResource MetroBrush}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="White"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                                    <Setter TargetName="Bg" Value="{StaticResource ButtonBorderBrush.Office2003}" Property="Shape.Stroke"/>
                                    <Setter TargetName="Bg" Value="{DynamicResource MetroBrush}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="White"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Property="UIElement.Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                <Setter Property="Control.Padding" Value="2,4,2,3"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid SnapsToDevicePixels="true" Margin="0,1,0,0">
                                <Rectangle Name="Bg" Fill="{TemplateBinding Control.Background}"
                           Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                                <Rectangle x:Name="InnerBorder" Margin="1" Stroke="Transparent" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                        <ColumnDefinition Width="4"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="37"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                        <ColumnDefinition Width="17"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="Icon" Margin="3,0,8,0" VerticalAlignment="Center" ContentSource="Icon"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Border x:Name="GlyphPanel" CornerRadius="0" Margin="1" Width="16" Height="16" Visibility="Hidden"
                                            BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0">
                                        <Path Stroke="{StaticResource XComponentMenuItemCheckBoxPathBrush}" StrokeThickness="1.4">
                                            <Path.Data>
                                                <GeometryGroup>
                                                    <LineGeometry StartPoint="6 9" EndPoint="9 16"/>
                                                    <LineGeometry StartPoint="9 16" EndPoint="13 3"/>
                                                </GeometryGroup>
                                            </Path.Data>
                                        </Path>
                                    </Border>
                                    <ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Control.Padding}"
                                    RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <TextBlock Grid.Column="4" Text="{TemplateBinding MenuItem.InputGestureText}"
                             Margin="{TemplateBinding Control.Padding}" Visibility="Collapsed"/>
                                    <Path Grid.Column="5" VerticalAlignment="Center" Margin="4,0,6,0"
                        Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource RightArrow}"/>
                                </Grid>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Right" VerticalOffset="-3"
                       HorizontalOffset="-2" Focusable="false"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <themes:SystemDropShadowChrome FrameworkElement.Name="Shdw" Color="Transparent">
                                        <Border Background="{DynamicResource MetroPanelBackgroundBrush}"
                            BorderBrush="{DynamicResource MetroBorderBrush}" BorderThickness="1" Grid.IsSharedSizeScope="true">
                                            <Grid Margin="0,0,0,0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Border BorderBrush="{StaticResource MetroThemeMenuPopupBorderBrush}" Background="Transparent"
                                BorderThickness="0,0,1,0"/>
                                                <ScrollViewer CanContentScroll="true" Grid.ColumnSpan="2"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"
                                          Margin="2,1,2,2" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </Grid>
                                        </Border>
                                    </themes:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                                    <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                                    <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Control.Foreground"/>
                                    <Setter TargetName="Bg" Value="{DynamicResource MetroBrush}" Property="Shape.Fill"/>
                                    <Setter TargetName="Bg" Value="{StaticResource BorderBrush.Office2003}" Property="Shape.Stroke"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Property="UIElement.Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuItem">
                <Setter Property="Control.Padding" Value="2,4,2,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style  TargetType="{x:Type ContextMenu}">
        <Setter Property="Foreground"  Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="Grid.IsSharedSizeScope"
          Value="true" />
        <Setter Property="HasDropShadow"
          Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                Background="{StaticResource PopupBackgroundBrush}" BorderBrush="Transparent"
                BorderThickness="1">
                        <StackPanel IsItemsHost="True" x:Name="check"
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow"
                   Value="true">
                            <Setter TargetName="Border"
                    Property="Padding"
                    Value="0,3,0,3" />
                            <Setter TargetName="Border"
                    Property="CornerRadius"
                    Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type syncfusion:GridDataControl}" BasedOn="{StaticResource {x:Type syncfusion:GridDataControl}}">
        <Setter Property="Background" Value="{StaticResource XComponentGridBackgroundBrush}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="HighlightSelectionForeground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="HeaderStyle" Value="{StaticResource GridDataHeaderCellControlStyle2}"></Setter>
        <Setter Property="OverrideVisualStyle" Value="true"></Setter>
        <Setter Property="EnableBlendStyling" Value="true"></Setter>
        <Setter Property="EnableRenderOptimization" Value="EnableOptimizations"></Setter>
        <Setter Property="AlternatingRowBackground" Value="{StaticResource XComponentGridAlternatingRowBrush}"></Setter>
        <Setter Property="ShowHoveringBackground" Value="true"></Setter>
        <Setter Property="StyleManager" Value="{StaticResource CustomGridDataStyleManager}"></Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="Control.FontFamily" Value="{StaticResource MetroFontFamily}"/>
        <Setter Property="Control.Background" Value="{StaticResource XComponentTextboxBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="border1" Width="13" Height="13" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                                <Path x:Name="Path" Data="M 4279.875,659 L 4283,662.5 4289.625,653.25 "
                      Stroke="{TemplateBinding Foreground}" StrokeThickness="1.5" FlowDirection="LeftToRight"
                      Height="8" Margin="0" Opacity="0" Stretch="Fill" Width="8.5"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContentControl.HasContent" Value="true">
                            <Setter Value="{StaticResource CheckRadioFocusVisual}" Property="FrameworkElement.FocusVisualStyle"/>
                            <Setter Property="Control.Padding" Value="4,1,0,0"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="Path" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
                            <Setter TargetName="Path" Property="Path.Data" Value="M 0,0 L 6,0 6,2 0,2 Z"/>
                            <Setter TargetName="Path" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="Path" Property="FrameworkElement.Height" Value="8"/>
                            <Setter TargetName="Path" Property="FrameworkElement.Width" Value="7"/>
                            <Setter TargetName="Path" Property="FrameworkElement.Margin" Value="1"/>
                            <Setter TargetName="Path" Property="Shape.Fill" Value="#FF333333"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border1" Value="{StaticResource CheckBoxMouseHoverBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="border1" Value="{StaticResource CheckBoxPressedBorderBrush}"
                      Property="Border.BorderBrush"/>
                            <Setter TargetName="border1" Value="{StaticResource XComponentSelectBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TitleBarButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="buttonborder" BorderThickness="0" Background="Transparent" Height="20" Width="22" HorizontalAlignment="Right" Margin="1,0,1,5">
                        <Path x:Name="icon" Fill="{StaticResource XComponentTitleBarIconBrush}" Stretch="Uniform" Width="11" Height="11" Data="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="buttonborder" Property="Background" Value="{StaticResource XComponentTitleBarIconBackgroundHoverBrush}" />
                            <Setter TargetName="icon" Property="Fill" Value="{StaticResource XComponentTitleBarIconHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="buttonborder" Property="Background" Value="{StaticResource XComponentTitleBarIconBackgroundPressedBrush}" />
                            <Setter TargetName="icon" Property="Fill" Value="{StaticResource XComponentTitleBarIconHoverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Geometry x:Key="MinimizeGeometry">M0,0L53.333,0 53.333,8.888 0,8.888z</Geometry>
    <Geometry x:Key="RestoreGeometry">M4.3685131,23.127279L4.3685131,47.283243 47.117023,47.283243 47.117023,23.127279z M25.087107,13.948568C23.539013,13.948568 22.286318,15.201555 22.286318,16.74834 22.286318,18.292325 23.539013,19.547214 25.087107,19.547214 26.6327,19.547214 27.886597,18.292325 27.886597,16.74834 27.886597,15.201555 26.6327,13.948568 25.087107,13.948568z M16.126242,13.948568C14.580646,13.948568 13.326751,15.201555 13.326751,16.74834 13.326751,18.292325 14.580646,19.547214 16.126242,19.547214 17.673136,19.547214 18.928329,18.292325 18.928329,16.74834 18.928329,15.201555 17.673136,13.948568 16.126242,13.948568z M7.1679735,13.948568C5.621069,13.948568 4.3685136,15.201555 4.3685131,16.74834 4.3685136,18.292325 5.621069,19.547214 7.1679735,19.547214 8.713438,19.547214 9.9674625,18.292325 9.9674625,16.74834 9.9674625,15.201555 8.713438,13.948568 7.1679735,13.948568z M0,10.684L53.755001,10.684 53.755001,51.668001 0,51.668001z M8.5679998,0L58.668022,0 64,0 64,5.6864691 64,45.317999 58.668022,45.317999 58.668022,5.6864691 8.5679998,5.6864691z</Geometry>
    <Geometry x:Key="MaximizeGeometry">M5.2010002,14.812L5.2010002,43.573997 56.098,43.573997 56.098,14.812z M29.868601,3.8869994C28.026201,3.8869996 26.534,5.3791947 26.534,7.2190399 26.534,9.0588851 28.026201,10.553 29.868601,10.553 31.7085,10.553 33.202,9.0588851 33.202,7.2190399 33.202,5.3791947 31.7085,3.8869996 29.868601,3.8869994z M19.200649,3.8869994C17.359457,3.8869996 15.867001,5.3791947 15.867001,7.2190399 15.867001,9.0588851 17.359457,10.553 19.200649,10.553 21.042044,10.553 22.536999,9.0588851 22.536999,7.2190399 22.536999,5.3791947 21.042044,3.8869996 19.200649,3.8869994z M8.5339746,3.8869994C6.6931,3.8869996 5.2010002,5.3791947 5.2010002,7.2190399 5.2010002,9.0588851 6.6931,10.553 8.5339746,10.553 10.37495,10.553 11.867,9.0588851 11.867,7.2190399 11.867,5.3791947 10.37495,3.8869996 8.5339746,3.8869994z M0,0L63.999001,0 63.999001,48.792999 0,48.792999z</Geometry>
    <Geometry x:Key="CloseGeometry">F1M54.0573,47.8776L38.1771,31.9974 54.0547,16.1198C55.7604,14.4141 55.7604,11.6511 54.0573,9.94531 52.3516,8.23962 49.5859,8.23962 47.8802,9.94531L32.0026,25.8229 16.1224,9.94531C14.4167,8.23962 11.6511,8.23962 9.94794,9.94531 8.24219,11.6511 8.24219,14.4141 9.94794,16.1198L25.8255,32 9.94794,47.8776C8.24219,49.5834 8.24219,52.3477 9.94794,54.0534 11.6511,55.7572 14.4167,55.7585 16.1224,54.0534L32.0026,38.1745 47.8802,54.0534C49.5859,55.7585 52.3516,55.7572 54.0573,54.0534 55.7604,52.3477 55.763,49.5834 54.0573,47.8776z</Geometry>
    <Style TargetType="{x:Type syncfusion:ChromelessWindow}" x:Key="XComponentDialog">
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="{StaticResource XComponentBackgroundBrush}"/>
        <Setter Property="TitleBarBackground" Value="{StaticResource XComponentBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource XComponentTextboxBorderBrush}"/>
        <Setter Property="TitleBarTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusionshared:TitleBar}">
                    <Border Name="border" Height="Auto" MinHeight="30" Background="{TemplateBinding Background}" >
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusion:ChromelessWindow}">
                    <Border Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding syncfusion:ChromelessWindow.BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" >
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <syncfusionshared:TitleBar Name="PART_TitleBar" Grid.Row="0" Margin="0" Template="{TemplateBinding TitleBarTemplate}" Background="{TemplateBinding TitleBarBackground}" >
                                <Grid VerticalAlignment="Top" Height="30">
                                    <StackPanel Orientation="Horizontal">
                                        <Image x:Name="PART_Icon" Source="{Binding RelativeSource={RelativeSource FindAncestor,  AncestorType={x:Type syncfusion:ChromelessWindow}}, Path=Icon}" 
                                               VerticalAlignment="Center"  HorizontalAlignment="Left" Margin="4,4,2,4"  MaxWidth="16" MaxHeight="16" MinWidth="16" MinHeight="16" />
                                        <ContentControl Foreground="{TemplateBinding Foreground}" Control.FontSize="16" Content="{TemplateBinding Title}" VerticalAlignment="Center" HorizontalAlignment="Left" x:Name="TitlePresenter" Margin="5,5,5,5" />
                                    </StackPanel>
                                    <StackPanel   Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                                        <syncfusion:TitleButton x:Name="MinimizeButton" ToolTip="{i18n:Translate Minimize}" Style="{StaticResource TitleBarButton}" Content="{StaticResource MinimizeGeometry}"
                                                                syncfusion:WindowChrome.IsHitTestVisibleInChrome="True" Command="syncfusion:ChromelessWindow.ToggleMinimizedState"/>
                                        <syncfusion:TitleButton x:Name="PART_MaximizeButton" ToolTip="{i18n:Translate Maximize}" Style="{StaticResource TitleBarButton}" Content="{StaticResource MaximizeGeometry}" Visibility="Collapsed" 
                                                                syncfusion:WindowChrome.IsHitTestVisibleInChrome="True" Command="syncfusion:ChromelessWindow.ToggleMaximizedState"/>
                                        <syncfusion:TitleButton x:Name="PART_RestoreButton" ToolTip="{i18n:Translate Restore}" Style="{StaticResource TitleBarButton}" Content="{StaticResource RestoreGeometry}" Visibility="Collapsed"
                                                                syncfusion:WindowChrome.IsHitTestVisibleInChrome="True" Command="syncfusion:ChromelessWindow.ToggleMaximizedState"/>
                                        <syncfusion:TitleButton x:Name="CloseButton" ToolTip="{i18n:Translate Close}" Style="{StaticResource TitleBarButton}" Content="{StaticResource CloseGeometry}"
                                                                syncfusion:WindowChrome.IsHitTestVisibleInChrome="True" Command="syncfusion:ChromelessWindow.CloseWindow"/>
                                    </StackPanel>
                                </Grid>
                            </syncfusionshared:TitleBar>

                            <Border Grid.Row="1"  Name="ContentAreaBorder" CornerRadius="{TemplateBinding CornerRadius}" >
                                <Grid x:Name="ChildGrid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <syncfusion:ResizeGripStyle x:Name="PART_Resizegrip" Style="{TemplateBinding ResizeGripStyle}" HorizontalAlignment="right" VerticalAlignment="Bottom" Visibility="Collapsed" IsTabStop="False" Cursor="SizeNWSE" Margin="0,0,3,3" />
                                    <ContentPresenter Name="contentpresenter"  />
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShowIcon" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Icon"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="MinimizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_MaximizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_RestoreButton"/>
                            <Setter Property="ResizeBorderThickness" Value="1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanMinimize"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_MaximizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_RestoreButton"/>
                            <Setter Property="IsEnabled" Value="False" TargetName="PART_MaximizeButton"/>
                            <Setter Property="IsEnabled" Value="False" TargetName="PART_RestoreButton"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanMinimize"/>
                                <Condition Property="WindowState" Value="Maximized"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_RestoreButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_MaximizeButton"/>
                            <Setter Property="IsEnabled" Value="False" TargetName="PART_MaximizeButton"/>
                            <Setter Property="IsEnabled" Value="False" TargetName="PART_RestoreButton"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResize"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="MinimizeButton"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_MaximizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_RestoreButton"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResize"/>
                                <Condition Property="WindowState" Value="Maximized"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="MinimizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_MaximizeButton"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_RestoreButton"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_Resizegrip"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_MaximizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_RestoreButton"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Maximized"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Resizegrip"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_MaximizeButton"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_RestoreButton"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="NoResize"/>
                                <Condition Property="WindowState" Value="Maximized"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="MinimizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_MaximizeButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_RestoreButton"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!-- SYNCFUSION UPDOWN -->
    <syncfusion:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <syncfusion:ClipConverter x:Key="clipConverter"/>
    <syncfusion:RadiusConverter x:Key="radiusConverter"/>
    <Style x:Key="NumericUpDownDoubleTextBoxStyle" TargetType="{x:Type syncfusion:DoubleTextBox}">
        <Setter Property="syncfusion:EditorBase.FocusedBorderBrush" Value="{DynamicResource MetroBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="syncfusion:EditorBase.WatermarkTextForeground"
            Value="{StaticResource XComponentWatermarkFontBrush}"/>
        <Setter Property="syncfusion:EditorBase.PositiveForeground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Padding" Value="0"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusion:DoubleTextBox}">
                    <Grid>
                        <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding syncfusion:EditorBase.CornerRadius}" SnapsToDevicePixels="true">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Visibility="{TemplateBinding syncfusion:EditorBase.ContentElementVisibility}"/>
                                <ContentControl x:Name="PART_Watermark"
                                Foreground="{TemplateBinding syncfusion:EditorBase.WatermarkTextForeground}" IsTabStop="false"
                                IsHitTestVisible="false" Background="{TemplateBinding syncfusion:EditorBase.WatermarkBackground}"
                                FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                                FontStretch="{TemplateBinding Control.FontStretch}" FontStyle="{TemplateBinding Control.FontStyle}"
                                FontWeight="{TemplateBinding Control.FontWeight}" Padding="{TemplateBinding Control.Padding}"
                                Visibility="{TemplateBinding syncfusion:EditorBase.WatermarkVisibility}"
                                Content="{TemplateBinding syncfusion:EditorBase.WatermarkText}"
                                Opacity="{TemplateBinding syncfusion:EditorBase.WatermarkOpacity}"
                                ContentTemplate="{TemplateBinding syncfusion:EditorBase.WatermarkTemplate}" Grid.Row="0"/>
                            </Grid>
                        </Border>
                        <Border x:Name="MouseOver_Border" BorderBrush="{DynamicResource MetroBorderBrush}"
                    CornerRadius="{TemplateBinding syncfusion:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                    Visibility="Collapsed"/>
                        <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding syncfusion:EditorBase.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding syncfusion:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                    Visibility="Collapsed"/>
                        <Border/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="1,9"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter Property="syncfusion:EditorBase.EnableTouch" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="RepeatButtonTemplate" TargetType="{x:Type RepeatButton}">
        <Border Name="Chrome" Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0"
            SnapsToDevicePixels="true">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Chrome" Value="{DynamicResource XComponentSelectBrush}" Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter TargetName="Chrome" Value="{DynamicResource MetroBrush}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Chrome" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ContextMenu x:Key="defaultcontextmenu">
        <MenuItem Header="Cut" Command="Cut"/>
        <MenuItem Header="Copy" Command="Copy"/>
        <MenuItem Header="Paste" Command="Paste"/>
    </ContextMenu>
    <Style x:Key="RepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template" Value="{StaticResource RepeatButtonTemplate}"/>
    </Style>
    <Style x:Key="MetroUpDownStyle" TargetType="{x:Type syncfusion:UpDown}">
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="syncfusion:UpDown.NegativeBackground" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="syncfusion:UpDown.NegativeBorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="syncfusion:UpDown.FocusedBorderBrush" Value="{DynamicResource MetroBrush}"/>
        <Setter Property="FrameworkElement.ContextMenu" Value="{DynamicResource defaultcontextmenu}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource MetroFontFamily}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="syncfusion:UpDown.FocusedBackground" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="syncfusion:UpDown.FocusedBorderBrush" Value="{DynamicResource MetroFocusedBorderBrush}"/>
        <Setter Property="syncfusion:UpDown.FocusedForeground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusion:UpDown}">
                    <Grid>
                        <Border x:Name="Border" CornerRadius="{TemplateBinding syncfusion:UpDown.CornerRadius}"
                    Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                            <UIElement.Clip>
                                <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}"
                                   RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}">
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource clipConverter}">
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </UIElement.Clip>
                            <Grid ClipToBounds="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <syncfusion:DoubleTextBox x:Name="SecondBlock" Grid.Column="0" Grid.RowSpan="2" Cursor="None"
                                          HorizontalContentAlignment="Center" BorderBrush="Transparent" VerticalContentAlignment="Center"
                                          Visibility="Collapsed" BorderThickness="0"
                                          NumberFormat="{TemplateBinding syncfusion:UpDown.NumberFormatInfo}" EnterToMoveNext="false"
                                          HorizontalAlignment="Stretch" Style="{StaticResource NumericUpDownDoubleTextBoxStyle}"
                                          Culture="{TemplateBinding syncfusion:UpDown.Culture}"
                                          Background="{TemplateBinding Control.Background}"
                                          PositiveForeground="{TemplateBinding Control.Foreground}"
                                          Focusable="{TemplateBinding UIElement.Focusable}" IsTabStop="{TemplateBinding Control.IsTabStop}"
                                          TextAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextAlignment, Mode=TwoWay}"
                                          ContextMenu="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}"
                                          ApplyZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ApplyZeroColor, Mode=TwoWay}"
                                          ApplyNegativeForeground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableNegativeColors, Mode=TwoWay}"
                                          ZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZeroColor, Mode=TwoWay}"/>
                                <syncfusion:DoubleTextBox x:Name="textBox" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                          Visibility="Collapsed" BorderThickness="0" EnterToMoveNext="false"
                                          Focusable="{TemplateBinding UIElement.Focusable}" BorderBrush="Transparent"
                                          NumberFormat="{TemplateBinding syncfusion:UpDown.NumberFormatInfo}" Grid.Column="0"
                                          Grid.RowSpan="2" Style="{StaticResource NumericUpDownDoubleTextBoxStyle}"
                                          Culture="{TemplateBinding syncfusion:UpDown.Culture}"
                                          Background="{TemplateBinding Control.Background}"
                                          PositiveForeground="{TemplateBinding Control.Foreground}"
                                          IsTabStop="{TemplateBinding Control.IsTabStop}"
                                          TextAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextAlignment, Mode=TwoWay}"
                                          ContextMenu="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}"
                                          ApplyZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ApplyZeroColor, Mode=TwoWay}"
                                          ApplyNegativeForeground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableNegativeColors, Mode=TwoWay}"
                                          ZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZeroColor, Mode=TwoWay}"/>
                                <syncfusion:DoubleTextBox x:Name="DoubleTextBox" Grid.Column="0" Grid.RowSpan="2" Padding="{TemplateBinding Control.Padding}"
                                          Background="{TemplateBinding Control.Background}"
                                          PositiveForeground="{TemplateBinding Control.Foreground}" EnterToMoveNext="false"
                                          Focusable="{TemplateBinding UIElement.Focusable}"
                                          CornerRadius="{TemplateBinding syncfusion:UpDown.CornerRadius}" BorderThickness="0"
                                          BorderBrush="Transparent" VerticalAlignment="Stretch" HorizontalContentAlignment="Center"
                                          HorizontalAlignment="Stretch" VerticalContentAlignment="Center"
                                          IsTabStop="{TemplateBinding Control.IsTabStop}" TabIndex="{TemplateBinding Control.TabIndex}"
                                          Style="{StaticResource NumericUpDownDoubleTextBoxStyle}"
                                          GroupSeperatorEnabled="{TemplateBinding syncfusion:UpDown.GroupSeperatorEnabled}"
                                          TextAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextAlignment, Mode=TwoWay}"
                                          ContextMenu="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}"
                                          MinValue="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MinValue, Mode=TwoWay}"
                                          MaxValue="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxValue, Mode=TwoWay}"
                                          NumberFormat="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberFormatInfo, Mode=TwoWay}"
                                          UseNullOption="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=UseNullOption, Mode=TwoWay}"
                                          NullValue="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NullValue, Mode=TwoWay}"
                                          Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                          Culture="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Culture, Mode=TwoWay}"
                                          Step="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Step, Mode=TwoWay}"
                                          ZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZeroColor, Mode=TwoWay}"
                                          MaxValidation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxValidation, Mode=TwoWay}"
                                          MinValidation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MinValidation, Mode=TwoWay}"
                                          IsScrollingOnCircle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsScrollingOnCircle, Mode=TwoWay}"
                                          NumberDecimalDigits="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberDecimalDigits, Mode=TwoWay}"
                                          IsReadOnly="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsReadOnly, Mode=TwoWay}"
                                          MaxValueOnExceedMaxDigit="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxValueOnExceedMaxDigit, Mode=TwoWay}"
                                          MinValueOnExceedMinDigit="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MinValueOnExceedMinDigit, Mode=TwoWay}"
                                          ApplyZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ApplyZeroColor, Mode=TwoWay}"
                                          ApplyNegativeForeground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableNegativeColors, Mode=TwoWay}"/>
                                <TextBox x:Name="text" Grid.Column="0" Grid.RowSpan="2" Width="{TemplateBinding FrameworkElement.Width}"
                         Height="{TemplateBinding FrameworkElement.Height}" BorderThickness="0" BorderBrush="Transparent"
                         Foreground="{TemplateBinding Control.Foreground}" Focusable="{TemplateBinding UIElement.Focusable}"
                         Background="{TemplateBinding Control.Background}" IsTabStop="{TemplateBinding Control.IsTabStop}"
                         Text="{TemplateBinding syncfusion:UpDown.NullValueText}" HorizontalContentAlignment="Left"
                         VerticalContentAlignment="Center"
                         ContextMenu="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}"
                         Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value, Converter={StaticResource NullToVisibilityConverter}, Mode=TwoWay}"/>
                                <RepeatButton x:Name="upbutton" Focusable="{TemplateBinding UIElement.Focusable}" Margin="0,-1,-1,0"
                              IsTabStop="false" Command="syncfusion:UpDown.m_upValue" Grid.Row="0" Grid.Column="1"
                              SnapsToDevicePixels="true" Style="{StaticResource RepeatButtonStyle}" Width="17">
                                    <Path x:Name="upbuttonpath" Stretch="Uniform" Height="4" Width="7"
                        Fill="{DynamicResource MetroForegroundBrush}"
                        Data="F1 M 541.537,173.589 L 531.107,173.589 536.322,167.49 541.537,173.589 Z"
                        HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="true"/>
                                </RepeatButton>
                                <RepeatButton x:Name="downbutton" Focusable="{TemplateBinding UIElement.Focusable}" Margin="0,-1,-1,-1"
                              IsTabStop="false" Command="syncfusion:UpDown.m_downValue" Grid.Row="2" SnapsToDevicePixels="true"
                              Grid.Column="1" Style="{StaticResource RepeatButtonStyle}" Width="17">
                                    <Path x:Name="downbuttonpath" Stretch="Uniform" Fill="{DynamicResource MetroForegroundBrush}" Height="4"
                        Width="7" Data="F1 M 531.107,321.943 L 541.537,321.943 536.322,328.042 531.107,321.943 Z"
                        HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="true"/>
                                </RepeatButton>
                            </Grid>
                        </Border>
                        <Border x:Name="MouseOver_Border" BorderBrush="{StaticResource XComponentSelectBrush}"
                    CornerRadius="{TemplateBinding syncfusion:UpDown.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
                        <Border x:Name="Focused_Border" BorderBrush="{StaticResource XComponentSelectBrush}"
                    CornerRadius="{TemplateBinding syncfusion:UpDown.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
                        <Border/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1"/>
                        </Trigger>
                        <Trigger Property="syncfusion:UpDown.IsFocused" Value="true">
                            <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger SourceName="Border" Property="Border.CornerRadius" Value="0">
                            <Setter TargetName="Border" Value="{x:Null}" Property="UIElement.Clip"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="1,8"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="upbutton" Property="FrameworkElement.Width" Value="40"/>
                            <Setter TargetName="downbutton" Property="FrameworkElement.Width" Value="40"/>
                            <Setter TargetName="upbutton" Property="FrameworkElement.Height" Value="25"/>
                            <Setter TargetName="downbutton" Property="FrameworkElement.Height" Value="25"/>
                            <Setter TargetName="upbuttonpath" Property="FrameworkElement.Width" Value="12"/>
                            <Setter TargetName="downbuttonpath" Property="FrameworkElement.Width" Value="12"/>
                            <Setter TargetName="downbuttonpath" Property="FrameworkElement.Height" Value="8"/>
                            <Setter TargetName="upbuttonpath" Property="FrameworkElement.Height" Value="8"/>
                        </Trigger>
                        <Trigger SourceName="upbutton" Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="upbutton" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                            <Setter TargetName="upbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}"
                      Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger SourceName="downbutton" Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="downbutton" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                            <Setter TargetName="downbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}"
                      Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="syncfusion:UpDown.IsUpdownFocused" Value="true">
                            <Setter Value="{Binding Path=FocusedBackground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Background"/>
                            <Setter Value="{Binding Path=FocusedBorderBrush, RelativeSource={RelativeSource Self}}"
                      Property="Control.BorderBrush"/>
                            <Setter Value="{Binding Path=FocusedForeground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:UpDown.IsValueNegative" Value="true">
                            <Setter Value="{Binding Path=NegativeBackground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Background"/>
                            <Setter Value="{Binding Path=NegativeBorderBrush, RelativeSource={RelativeSource Self}}"
                      Property="Control.BorderBrush"/>
                            <Setter Value="{Binding Path=NegativeForeground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                                <Condition Property="syncfusion:UpDown.EnableFocusedColors" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{Binding Path=FocusedBackground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Background"/>
                            <Setter Value="{Binding Path=FocusedBorderBrush, RelativeSource={RelativeSource Self}}"
                      Property="Control.BorderBrush"/>
                            <Setter Value="{Binding Path=FocusedForeground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Foreground"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="true">
                            <Setter Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource MetroUpDownStyle}" TargetType="{x:Type syncfusion:UpDown}"/>

    <!-- SYNCFUSION DATETIMEEDIT -->

    <resources:ResourceWrapper x:Key="ResourceWrapperKey"/>
    <SolidColorBrush x:Key="ReadOnlyBackground" Color="#FFEBEBEB"/>
    <SolidColorBrush x:Key="ReadOnlyForeground" Color="#FF83838B"/>
    <SolidColorBrush x:Key="Office2010BlueMouseOverBorderBrush" Color="Transparent"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <SolidColorBrush x:Key="MetroThemeBackgroundBrush" Color="White"/>
    <SolidColorBrush x:Key="MetroThemeCalendarDayButtonInactiveForegroundBrush" Color="#FFA3ABB5"/>
    <ControlTemplate x:Key="ToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border Name="Chrome" Background="{TemplateBinding Panel.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0"
            SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentpresenter" Margin="{TemplateBinding Control.Padding}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="Chrome" Value="{StaticResource XComponentSelectBrush}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter TargetName="Chrome" Value="{DynamicResource MetroBrush}" Property="Border.Background"/>
                <Setter TargetName="Chrome" Value="{DynamicResource MetroFocusedBorderBrush}" Property="Border.BorderBrush"/>
                <Setter TargetName="contentpresenter" Value="{DynamicResource MetroHighlightedForegroundBrush}"
                Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Chrome" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template" Value="{StaticResource ToggleButtonTemplate}"/>
    </Style>
    <ControlTemplate x:Key="ToggleButtonTemplate1" TargetType="{x:Type ToggleButton}">
        <Border Name="Chrome" Background="{TemplateBinding Panel.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0"
            SnapsToDevicePixels="true">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Chrome" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True"/>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1,1,0,1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template" Value="{StaticResource ToggleButtonTemplate1}"/>
    </Style>
    <Style x:Key="MetroCalendarButtonStyle"
         TargetType="{x:Type primitives:CalendarButton}">
        <Setter Property="Control.Background" Value="{StaticResource XComponentGreyBrush}"/>
        <Setter Property="FrameworkElement.MinWidth" Value="40"/>
        <Setter Property="FrameworkElement.MinHeight" Value="42"/>
        <Setter Property="Control.FontSize" Value="11"/>
        <Setter Property="Control.FontFamily" Value="Segoe UI"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:CalendarButton}">
                    <Grid>
                        <Rectangle x:Name="SelectedBackground" Stroke="{DynamicResource MetroBrush}"
                       Fill="{StaticResource MetroHoverBrush}" Opacity="0" SnapsToDevicePixels="true"/>
                        <Rectangle x:Name="Background" Fill="{DynamicResource MetroHoverBrush}" Opacity="0" RadiusY="0" RadiusX="0"/>
                        <ContentPresenter x:Name="NormalText" TextElement.Foreground="{DynamicResource MetroForegroundBrush}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1,0,1,1"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                        <Rectangle x:Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusY="1" RadiusX="1"
                       Stroke="Transparent" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="CalendarButtonFocusVisual" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="false">
                            <Setter TargetName="CalendarButtonFocusVisual" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Background" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="UIElement.Opacity" Value="0"/>
                            <Setter TargetName="NormalText" Property="UIElement.Opacity" Value="0.35"/>
                        </Trigger>
                        <Trigger Property="primitives:CalendarButton.HasSelectedDays" Value="true">
                            <Setter TargetName="SelectedBackground" Property="UIElement.Opacity" Value="0.75"/>
                        </Trigger>
                        <Trigger Property="primitives:CalendarButton.IsInactive" Value="true">
                            <Setter TargetName="NormalText" Value="{StaticResource MetroThemeCalendarDayButtonInactiveForegroundBrush}"
                      Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter Property="FrameworkElement.MinWidth" Value="100"/>
                            <Setter Property="FrameworkElement.MinHeight" Value="102"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroCalendarDayButtonStyle"
         TargetType="{x:Type primitives:CalendarDayButton}">
        <Setter Property="FrameworkElement.MinWidth" Value="5"/>
        <Setter Property="FrameworkElement.MinHeight" Value="5"/>
        <Setter Property="Control.FontSize" Value="11"/>
        <Setter Property="Control.FontFamily" Value="Segoe UI"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:CalendarDayButton}">
                    <Grid>
                        <Rectangle x:Name="TodayBackground" Fill="Transparent" Stroke="{DynamicResource MetroBrush}" Opacity="0"
                       SnapsToDevicePixels="true" StrokeThickness="1"/>
                        <Rectangle x:Name="SelectedBackground" Fill="{DynamicResource MetroHoverBrush}"
                       Stroke="{DynamicResource MetroBrush}" Opacity="0" RadiusY="0" RadiusX="0"
                       SnapsToDevicePixels="true"/>
                        <Rectangle x:Name="HighlightBackground" Fill="{DynamicResource MetroHoverBrush}" Opacity="0" RadiusY="0"
                       RadiusX="0"/>
                        <ContentPresenter x:Name="NormalText" TextElement.Foreground="{DynamicResource MetroForegroundBrush}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="5,2,5,1"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                        <Path x:Name="Blackout"
                  Data="M 8.1772461,11.029181 L 10.433105,11.029181 11.700684,12.801641 12.973633,11.029181 15.191895,11.029181 12.844727,13.999395 15.21875,17.060919 12.962891,17.060919 11.673828,15.256231 10.352539,17.060919 8.1396484,17.060919 10.519043,14.042364 Z"
                  Fill="#FF000000" HorizontalAlignment="Stretch" Margin="3" Opacity="0"
                  RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch"/>
                        <Rectangle x:Name="DayButtonFocusVisual" IsHitTestVisible="false" RadiusY="0" RadiusX="0" Stroke="Transparent"
                       Visibility="Collapsed" SnapsToDevicePixels="true"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="HighlightBackground" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="HighlightBackground" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="HighlightBackground" Property="UIElement.Opacity" Value="0"/>
                            <Setter TargetName="NormalText" Property="UIElement.Opacity" Value="0.35"/>
                        </Trigger>
                        <Trigger Property="primitives:CalendarDayButton.IsSelected" Value="true">
                            <Setter TargetName="SelectedBackground" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="primitives:CalendarDayButton.IsSelected" Value="true"/>
                                <Condition Property="primitives:CalendarDayButton.IsToday" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SelectedBackground" Property="UIElement.Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger Property="primitives:CalendarDayButton.IsToday" Value="true">
                            <Setter TargetName="TodayBackground" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="primitives:CalendarDayButton.IsBlackedOut" Value="true">
                            <Setter TargetName="Blackout" Property="UIElement.Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="DayButtonFocusVisual" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="false">
                            <Setter TargetName="DayButtonFocusVisual" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="primitives:CalendarDayButton.IsInactive" Value="true">
                            <Setter TargetName="NormalText" Value="{StaticResource MetroThemeCalendarDayButtonInactiveForegroundBrush}"
                      Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter Property="FrameworkElement.MinHeight" Value="45"/>
                            <Setter Property="FrameworkElement.MinWidth" Value="45"/>
                            <Setter Property="FrameworkElement.Margin" Value="6,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroCalendarItemStyle"
         TargetType="{x:Type primitives:CalendarItem}">
        <Setter Property="FrameworkElement.Margin" Value="0,3,0,3"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.FontFamily" Value="Segoe UI"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:CalendarItem}">
                    <FrameworkTemplate.Resources>
                        <DataTemplate x:Key="DayTitleTemplate">
                            <TextBlock Foreground="{DynamicResource MetroBrush}" FontWeight="Bold" FontSize="11" FontFamily="Segoe UI"
                         HorizontalAlignment="Center" Margin="0,6,0,6" VerticalAlignment="Center" Text="{Binding}"/>
                        </DataTemplate>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <FrameworkElement.Resources>
                            <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
                        </FrameworkElement.Resources>
                        <Border BorderBrush="{DynamicResource MetroBorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" CornerRadius="1">
                            <Grid>
                                <FrameworkElement.Resources>
                                    <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                                        <Grid Cursor="Hand">
                                            <Ellipse x:Name="circle" Width="19" Height="19" Stroke="#FFC1C1C1" HorizontalAlignment="Center"
                               VerticalAlignment="Center" Fill="{StaticResource MetroThemeBackgroundBrush}"/>
                                            <Path x:Name="path" Data="M 288.75,232.25 L 288.75,240.625 283,236.625 Z" Fill="#FF3B3B3B"
                            Margin="0,0,2,0" HorizontalAlignment="Center" Height="9" Stretch="Fill" VerticalAlignment="Center"
                            Width="6"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                                </MultiTrigger.Conditions>
                                                <Setter TargetName="circle" Property="Shape.Stroke" Value="#FF838383"/>
                                            </MultiTrigger>
                                            <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                                                <Setter TargetName="circle" Property="FrameworkElement.Width" Value="40"/>
                                                <Setter TargetName="circle" Property="FrameworkElement.Height" Value="40"/>
                                                <Setter TargetName="path" Property="FrameworkElement.Height" Value="19"/>
                                                <Setter TargetName="path" Property="FrameworkElement.Width" Value="16"/>
                                            </Trigger>
                                            <Trigger Property="ButtonBase.IsPressed" Value="true">
                                                <Setter TargetName="circle" Property="Shape.Stroke" Value="#FFADADAD"/>
                                                <Setter TargetName="path" Property="Shape.Stroke" Value="#FFC6C6C6"/>
                                                <Setter TargetName="path" Property="Shape.Fill" Value="#FFC6C6C6"/>
                                            </Trigger>
                                            <Trigger Property="UIElement.IsEnabled" Value="false">
                                                <Setter TargetName="path" Property="UIElement.Opacity" Value="0.5"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                                        <Grid Cursor="Hand">
                                            <Ellipse x:Name="circle" Width="19" Height="19" Stroke="#FFC1C1C1" HorizontalAlignment="Center"
                               VerticalAlignment="Center" Fill="{StaticResource MetroThemeBackgroundBrush}"/>
                                            <Path x:Name="path1" Data="M 282.875,231.875 L 282.875,240.375 288.625,236 Z" Fill="#FF3B3B3B"
                            HorizontalAlignment="Center" Margin="2,0,0,0" Height="9" Stretch="Fill" VerticalAlignment="Center"
                            Width="6"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                                </MultiTrigger.Conditions>
                                                <Setter TargetName="circle" Property="Shape.Stroke" Value="#FF838383"/>
                                            </MultiTrigger>
                                            <Trigger Property="ButtonBase.IsPressed" Value="true">
                                                <Setter TargetName="circle" Property="Shape.Stroke" Value="#FFADADAD"/>
                                                <Setter TargetName="path1" Property="Shape.Stroke" Value="#FFC6C6C6"/>
                                                <Setter TargetName="path1" Property="Shape.Fill" Value="#FFC6C6C6"/>
                                            </Trigger>
                                            <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                                                <Setter TargetName="circle" Property="FrameworkElement.Width" Value="40"/>
                                                <Setter TargetName="circle" Property="FrameworkElement.Height" Value="40"/>
                                                <Setter TargetName="path1" Property="FrameworkElement.Height" Value="19"/>
                                                <Setter TargetName="path1" Property="FrameworkElement.Width" Value="16"/>
                                            </Trigger>
                                            <Trigger Property="UIElement.IsEnabled" Value="false">
                                                <Setter TargetName="path1" Property="UIElement.Opacity" Value="0.5"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                                        <Grid Cursor="Hand">
                                            <ContentPresenter x:Name="buttonContent" TextElement.FontWeight="Bold"
                                        TextElement.FontSize="{TemplateBinding Control.FontSize}"
                                        ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                        Content="{TemplateBinding ContentControl.Content}" TextElement.Foreground="#FF3B3B3B"
                                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="UIElement.IsMouseOver" Value="true"/>
                                            <Trigger Property="UIElement.IsEnabled" Value="false">
                                                <Setter TargetName="buttonContent" Property="UIElement.Opacity" Value="0.5"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </FrameworkElement.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid Background="Transparent" ColumnSpan="3" Margin="0,6,0,0">
                                    <Button x:Name="PART_PreviousButton" Margin="8,0,0,0" Grid.Column="0" Focusable="false"
                          HorizontalAlignment="Left" Height="20" Grid.Row="0"
                          Template="{StaticResource PreviousButtonTemplate}" Width="28"/>
                                    <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Normal" Focusable="false"
                          FontFamily="{TemplateBinding Control.FontFamily}" FontSize="11" HorizontalAlignment="Center"
                          Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" VerticalAlignment="Center"/>
                                    <Button x:Name="PART_NextButton" Margin="0,0,3,0" Grid.Column="2" Focusable="false"
                          HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{StaticResource NextButtonTemplate}"
                          Width="28"/>
                                </Grid>
                                <Grid x:Name="PART_MonthView" ColumnSpan="3" HorizontalAlignment="Center" VerticalAlignment="Stretch"
                      Margin="6,2,6,6" Row="1" Visibility="Visible">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                </Grid>
                                <Grid x:Name="PART_YearView" ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" Row="1"
                      Visibility="Hidden">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                </Grid>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusY="2"
                       RadiusX="2" Stretch="Fill" Stroke="{StaticResource DisabledColor}" StrokeThickness="1"
                       Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="PART_DisabledVisual" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_DisabledVisual" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <DataTrigger Value="Year"
                         Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type controls:Calendar}}}">
                            <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Value="Decade"
                         Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type controls:Calendar}}}">
                            <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter TargetName="PART_HeaderButton" Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="PART_PreviousButton" Property="FrameworkElement.Height" Value="48"/>
                            <Setter TargetName="PART_PreviousButton" Property="FrameworkElement.Width" Value="40"/>
                            <Setter TargetName="PART_NextButton" Property="FrameworkElement.Height" Value="48"/>
                            <Setter TargetName="PART_NextButton" Property="FrameworkElement.Width" Value="40"/>
                            <Setter TargetName="PART_MonthView" Property="TextBlock.FontSize" Value="18"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroCalendarStyle" TargetType="{x:Type controls:Calendar}">
        <Setter Property="controls:Calendar.CalendarButtonStyle"
            Value="{StaticResource MetroCalendarButtonStyle}"/>
        <Setter Property="controls:Calendar.CalendarDayButtonStyle"
            Value="{StaticResource MetroCalendarDayButtonStyle}"/>
        <Setter Property="controls:Calendar.CalendarItemStyle"
            Value="{StaticResource MetroCalendarItemStyle}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                        <primitives:CalendarItem x:Name="PART_CalendarItem" BorderBrush="Transparent"
                                                                 BorderThickness="{TemplateBinding Control.BorderThickness}"
                                                                 Background="{TemplateBinding Control.Background}"
                                                                 Style="{TemplateBinding controls:Calendar.CalendarItemStyle}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="false">
                            <Setter TargetName="PART_CalendarItem" Property="FrameworkElement.Height" Value="166.98"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource MetroCalendarStyle}"
         TargetType="{x:Type controls:Calendar}"/>
    <Style x:Key="MetroDateTimeEditStyle" TargetType="{x:Type syncfusion:DateTimeEdit}">
        <Setter Property="Control.Background" Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="syncfusion:DateTimeEdit.FocusedBorderBrush" Value="{DynamicResource MetroBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="syncfusion:DateTimeBase.RepeatButtonBackground"
            Value="{DynamicResource MetroPanelBackgroundBrush}"/>
        <Setter Property="syncfusion:DateTimeBase.RepeatButtonBorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="syncfusion:DateTimeBase.DropDownButtonTemplate"
            Value="{StaticResource ToggleButtonTemplate1}"/>
        <Setter Property="syncfusion:DateTimeBase.UpRepeatButtonTemplate"
            Value="{StaticResource RepeatButtonTemplate}"/>
        <Setter Property="syncfusion:DateTimeBase.DownRepeatButtonTemplate"
            Value="{StaticResource RepeatButtonTemplate}"/>
        <Setter Property="syncfusion:DateTimeEdit.CalendarStyle" Value="{StaticResource MetroCalendarStyle}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusion:DateTimeEdit}">
                    <Grid>
                        <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1" CornerRadius="0"
                                SnapsToDevicePixels="true">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="0"/>
                                    </Grid.RowDefinitions>
                                    <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                Visibility="{TemplateBinding syncfusion:DateTimeBase.ContentElementVisibility}"/>
                                    <ContentControl x:Name="PART_EmptyContent" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Visibility="{TemplateBinding syncfusion:DateTimeBase.WatermarkVisibility}"
                                  Content="{TemplateBinding syncfusion:DateTimeBase.NoneDateText}" IsTabStop="false"
                                  IsHitTestVisible="false" FontFamily="{TemplateBinding Control.FontFamily}"
                                  FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                                  FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                                  Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"
                                  Foreground="{TemplateBinding Control.Foreground}" Opacity="0.5"/>
                                    <ToggleButton x:Name="PART_DropDown" IsTabStop="false" Grid.Column="2" BorderThickness="1" Padding="1"
                                Margin="0,-1,-1,-1" Style="{StaticResource ToggleButtonStyle1}" Width="20"
                                HorizontalAlignment="Stretch"
                                Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsButtonPopUpEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <ContentControl.Content>
                                            <Path x:Name="path1" Stretch="Uniform" Fill="{DynamicResource MetroForegroundBrush}" Height="4" Width="7"
                            Data="F1 M 531.107,321.943 L 541.537,321.943 536.322,328.042 531.107,321.943 Z"
                            HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </ContentControl.Content>
                                    </ToggleButton>
                                    <Grid Column="3">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="5*"/>
                                            <RowDefinition Height="5*"/>
                                        </Grid.RowDefinitions>
                                        <RepeatButton x:Name="PART_UpArrow" IsTabStop="false"
                                  Template="{TemplateBinding syncfusion:DateTimeBase.UpRepeatButtonTemplate}" BorderThickness="1"
                                  Margin="0,-1,-1,-0.5" BorderBrush="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBorderBrush}"
                                  Background="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBackground}"
                                  IsEnabled="{TemplateBinding syncfusion:DateTimeBase.IsEnabledRepeatButton}" Grid.Row="0"
                                  Grid.Column="1" Padding="1" Width="20"
                                  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsVisibleRepeatButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <ContentControl.Content>
                                                <Path x:Name="upbuttonpath" Stretch="Uniform" Height="8" Width="6"
                              Stroke="{DynamicResource MetroForegroundBrush}" StrokeThickness="1" Margin="3,2,3,2"
                              Fill="{DynamicResource MetroForegroundBrush}"
                              Data="F1 M 541.537,173.589 L 531.107,173.589 536.322,167.49 541.537,173.589 Z"
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                            </ContentControl.Content>
                                        </RepeatButton>
                                        <RepeatButton x:Name="PART_DownArrow" IsTabStop="false"
                                  Template="{TemplateBinding syncfusion:DateTimeBase.DownRepeatButtonTemplate}" BorderThickness="1"
                                  Margin="0,-0.5,-1,-1" BorderBrush="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBorderBrush}"
                                  Background="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBackground}"
                                  IsEnabled="{TemplateBinding syncfusion:DateTimeBase.IsEnabledRepeatButton}" Grid.Row="1"
                                  Grid.Column="1" Padding="1" Width="20"
                                  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsVisibleRepeatButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <ContentControl.Content>
                                                <Path x:Name="downbuttonpath" Stretch="Uniform" Fill="{DynamicResource MetroForegroundBrush}"
                              Stroke="{DynamicResource MetroForegroundBrush}" StrokeThickness="1" Height="8" Width="6"
                              Data="F1 M 531.107,321.943 L 541.537,321.943 536.322,328.042 531.107,321.943 Z" Margin="3,2,3,2"
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                            </ContentControl.Content>
                                        </RepeatButton>
                                    </Grid>
                                    <Popup x:Name="PART_Popup" Grid.Row="1" IsOpen="false" StaysOpen="false" AllowsTransparency="true">
                                        <Grid Background="Transparent">
                                            <Grid x:Name="PART_PopupGrid" Background="Transparent">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="5*"/>
                                                    <ColumnDefinition Width="5*"/>
                                                    <ColumnDefinition Width="5*"/>
                                                </Grid.ColumnDefinitions>
                                                <ToggleButton x:Name="Button_Calender" BorderThickness="1" Style="{StaticResource ToggleButtonStyle}" Width="60"
                                      FontSize="12" Grid.Row="0" Grid.Column="0" Margin="0,0,0,0"
                                      Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=AccessCalendarText}"
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsCalendarEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                <ToggleButton x:Name="Button_Clock" BorderThickness="1" Style="{StaticResource ToggleButtonStyle}" Width="60"
                                      FontSize="12" Grid.Row="0" Grid.Column="1" Margin="0,0,0,0"
                                      Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=AccessClockText}"
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsWatchEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                <ToggleButton x:Name="Button_NoDate" BorderThickness="1" Style="{StaticResource ToggleButtonStyle}" Width="60"
                                      FontSize="12" Grid.Row="0" Grid.Column="2" Margin="0,0,0,0"
                                      Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=AccessEmptyDateText}"
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsEmptyDateEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                <Popup x:Name="PART_CalenderPopup" IsOpen="false" StaysOpen="false" Grid.ColumnSpan="3" Grid.Row="1">
                                                    <StackPanel Visibility="Visible">
                                                        <controls:Calendar x:Name="Calendar" Style="{TemplateBinding syncfusion:DateTimeEdit.CalendarStyle}" Margin="0,-3,0,0"/>
                                                        <ToggleButton x:Name="Button_Today" BorderThickness="1" Style="{StaticResource ToggleButtonStyle}"
                                          Margin="0,-4,0,0" Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=TodayLabel}"/>
                                                    </StackPanel>
                                                </Popup>
                                                <Popup x:Name="PART_WatchPopup" IsOpen="false" Grid.ColumnSpan="3" Grid.Row="1" StaysOpen="false">
                                                    <Border BorderBrush="{DynamicResource MetroBorderBrush}"
                                  Background="{DynamicResource MetroPanelBackgroundBrush}" BorderThickness="1">
                                                        <syncfusion:Clock x:Name="Clock"/>
                                                    </Border>
                                                </Popup>
                                            </Grid>
                                            <Grid x:Name="PART_PopupGrid_Classic" Background="Transparent">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="5*"/>
                                                    <ColumnDefinition Width="5*"/>
                                                </Grid.ColumnDefinitions>
                                                <controls:Calendar x:Name="Calendar_Classic" Margin="0,-2.5,0,0" Grid.ColumnSpan="2"
                                                              Style="{TemplateBinding syncfusion:DateTimeEdit.CalendarStyle}"/>
                                                <ToggleButton x:Name="Button_Today_Classic" BorderThickness="1" Style="{StaticResource ToggleButtonStyle}"
                                      Margin="0,-4,0,0" FontSize="12" Grid.Column="0" Grid.Row="1" SnapsToDevicePixels="true"
                                      Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=TodayLabel}"/>
                                                <ToggleButton x:Name="Button_NoDate_Classic" Style="{StaticResource ToggleButtonStyle}" FontSize="12"
                                      Margin="0,-4,0,0" Grid.Row="1" Grid.Column="1"
                                      Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=AccessEmptyDateText}"
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsEmptyDateEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                            </Grid>
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Grid>
                        </Border>
                        <Border x:Name="MouseOverBorder" CornerRadius="1"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed" Opacity="1"
                    BorderBrush="{DynamicResource MetroBorderBrush}"/>
                        <Border x:Name="FocusBorder" CornerRadius="1" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Visibility="Collapsed" Opacity="1"
                    BorderBrush="{DynamicResource MetroBorderBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_CalenderPopup" Property="Popup.IsOpen" Value="true">
                            <Setter TargetName="Button_Calender" Property="FrameworkElement.Margin" Value="0,0,-1,-1"/>
                            <Setter TargetName="Button_Clock" Property="FrameworkElement.Margin" Value="0,0,0,-1"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PART_DropDown" Value="{StaticResource XComponentSelectBrush}" Property="Control.Background"/>
                            <Setter TargetName="MouseOverBorder" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="FocusBorder" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="PART_UpArrow" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PART_UpArrow" Value="{DynamicResource MetroHoverBrush}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger SourceName="PART_UpArrow" Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="PART_UpArrow" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                            <Setter TargetName="upbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="upbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger SourceName="PART_DownArrow" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PART_DownArrow" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger SourceName="PART_DownArrow" Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="PART_DownArrow" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                            <Setter TargetName="downbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="downbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger SourceName="PART_DropDown" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PART_DropDown" Value="{StaticResource XComponentSelectBrush}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger SourceName="PART_DropDown" Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="PART_DropDown" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                            <Setter TargetName="path1" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger SourceName="PART_DropDown" Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="PART_DropDown" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                            <Setter TargetName="path1" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="MouseOverBorder" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="FocusBorder" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
                            <Setter Value="{StaticResource ReadOnlyBackground}" Property="Control.Background"/>
                            <Setter Value="{StaticResource ReadOnlyForeground}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="16,10,23,10"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="PART_DropDown" Property="FrameworkElement.Width" Value="25"/>
                            <Setter TargetName="Button_Today" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="Button_Today_Classic" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="Button_NoDate_Classic" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="Button_Calender" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="Button_Clock" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="Button_NoDate" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="Button_Today" Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="Button_Today_Classic" Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="Button_NoDate_Classic" Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="Button_Calender" Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="Button_Clock" Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="Button_NoDate" Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="Button_Calender" Property="FrameworkElement.Width" Value="80"/>
                            <Setter TargetName="Button_Clock" Property="FrameworkElement.Width" Value="80"/>
                            <Setter TargetName="Button_NoDate" Property="FrameworkElement.Width" Value="80"/>
                            <Setter TargetName="Border" Property="UIElement.Effect">
                                <Setter.Value>
                                    <DropShadowEffect Direction="315" ShadowDepth="2" Opacity="0.3"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="syncfusion:DateTimeEdit.EnableCombinedStyle" Value="true">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type syncfusion:DateTimeEdit}">
                            <Grid>
                                <Border x:Name="Border" SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="0"/>
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    Visibility="{TemplateBinding syncfusion:DateTimeBase.ContentElementVisibility}"/>
                                            <ContentControl x:Name="PART_EmptyContent" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                      Visibility="{TemplateBinding syncfusion:DateTimeBase.WatermarkVisibility}"
                                      Content="{TemplateBinding syncfusion:DateTimeBase.NoneDateText}" IsTabStop="false"
                                      IsHitTestVisible="false" FontFamily="{TemplateBinding Control.FontFamily}"
                                      FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                                      FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                                      Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"
                                      Foreground="{TemplateBinding Control.Foreground}" Opacity="0.5"/>
                                            <ToggleButton x:Name="PART_DropDown" IsTabStop="false" Grid.Column="2" BorderThickness="1" Padding="1"
                                    Template="{TemplateBinding syncfusion:DateTimeBase.DropDownButtonTemplate}"
                                    Style="{StaticResource ToggleButtonStyle1}" Width="20" HorizontalAlignment="Stretch"
                                    Margin="0,-1,-1,-1"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsButtonPopUpEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                <ContentControl.Content>
                                                    <Path x:Name="path1" Stretch="Uniform" Fill="{DynamicResource MetroForegroundBrush}"
                                Stroke="{DynamicResource MetroForegroundBrush}" Height="7" Width="5" Data="M 0,0 L 3.5,4 7,0 Z"
                                HorizontalAlignment="Center" StrokeThickness="1" VerticalAlignment="Center"/>
                                                </ContentControl.Content>
                                            </ToggleButton>
                                            <Grid Column="3" RowSpan="2">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="5*"/>
                                                    <RowDefinition Height="5*"/>
                                                </Grid.RowDefinitions>
                                                <RepeatButton x:Name="PART_UpArrow" IsTabStop="false"
                                      Template="{TemplateBinding syncfusion:DateTimeBase.UpRepeatButtonTemplate}" BorderThickness="1"
                                      Margin="1,-1,-1,-1" BorderBrush="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBorderBrush}"
                                      Background="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBackground}"
                                      IsEnabled="{TemplateBinding syncfusion:DateTimeBase.IsEnabledRepeatButton}" Grid.Row="0"
                                      Grid.Column="1" Width="20" Padding="1"
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsVisibleRepeatButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <ContentControl.Content>
                                                        <Path x:Name="upbuttonpath" Margin="-2" Stretch="Uniform" Height="7" Width="5"
                                  Stroke="{DynamicResource MetroForegroundBrush}" Fill="{DynamicResource MetroForegroundBrush}"
                                  Data="F1 M 541.537,173.589 L 531.107,173.589 536.322,167.49 541.537,173.589 Z"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                    </ContentControl.Content>
                                                </RepeatButton>
                                                <RepeatButton x:Name="PART_DownArrow" IsTabStop="false"
                                      Template="{TemplateBinding syncfusion:DateTimeBase.DownRepeatButtonTemplate}" BorderThickness="1"
                                      Margin="1,-1,-1,-1" BorderBrush="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBorderBrush}"
                                      Background="{TemplateBinding syncfusion:DateTimeBase.RepeatButtonBackground}"
                                      IsEnabled="{TemplateBinding syncfusion:DateTimeBase.IsEnabledRepeatButton}" Grid.Row="1"
                                      Grid.Column="1" Width="20" Padding="1"
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsVisibleRepeatButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <ContentControl.Content>
                                                        <Path x:Name="downbuttonpath" Stretch="Uniform" Margin="-2" Fill="{DynamicResource MetroForegroundBrush}"
                                  Stroke="{DynamicResource MetroForegroundBrush}" Height="8" Width="6"
                                  Data="F1 M 531.107,321.943 L 541.537,321.943 536.322,328.042 531.107,321.943 Z"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                    </ContentControl.Content>
                                                </RepeatButton>
                                            </Grid>
                                            <Popup x:Name="PART_Popup" Grid.Row="1" VerticalOffset="2" IsOpen="false" StaysOpen="false">
                                                <Border Background="White" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1">
                                                    <Grid x:Name="PART_PopupGrid" Background="{TemplateBinding Control.Background}">
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="*"/>
                                                            <RowDefinition Height="Auto"/>
                                                        </Grid.RowDefinitions>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="5*"/>
                                                                <ColumnDefinition Width="5*"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Border x:Name="CalendarBorder" Grid.Row="0" Grid.Column="0" Height="190">
                                                                <StackPanel Visibility="Visible">
                                                                    <controls:Calendar x:Name="Calendar" Style="{TemplateBinding syncfusion:DateTimeEdit.CalendarStyle}"/>
                                                                    <ToggleButton x:Name="Button_Today" Margin="0,-2,0,0" BorderThickness="1"
                                                Style="{StaticResource ToggleButtonStyle}" FontSize="12"
                                                Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=TodayLabel}"/>
                                                                </StackPanel>
                                                            </Border>
                                                            <Border x:Name="ClockBorder" Grid.Row="0" Grid.Column="1" Height="190" Margin="2,2,2,2">
                                                                <syncfusion:Clock x:Name="Clock"/>
                                                            </Border>
                                                        </Grid>
                                                        <Grid x:Name="PART_OptionGrid" Row="1" Margin="4,4,0,0" Background="{TemplateBinding Control.Background}"
                                  HorizontalAlignment="Center">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="70"/>
                                                                <ColumnDefinition Width="50"/>
                                                                <ColumnDefinition Width="50"/>
                                                            </Grid.ColumnDefinitions>
                                                            <CheckBox x:Name="Button_Calender" Width="70" FontSize="12" Grid.Column="0" Margin="0,0,0,2"
                                        Foreground="{DynamicResource MetroForegroundBrush}"
                                        Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=AccessCalendarText}"
                                        IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsCalendarEnabled}"/>
                                                            <CheckBox x:Name="Button_Clock" Width="50" FontSize="12" Grid.Column="1" Margin="0,0,0,2"
                                        Foreground="{DynamicResource MetroForegroundBrush}"
                                        Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=AccessClockText}"
                                        IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsWatchEnabled}"/>
                                                            <ToggleButton x:Name="Button_NoDate" Style="{StaticResource ToggleButtonStyle}" Width="50" FontSize="12"
                                            Grid.Column="2" Margin="0,0,2,4"
                                            Content="{Binding Source={StaticResource ResourceWrapperKey}, Path=AccessEmptyDateText}"
                                            Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsEmptyDateEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                        </Grid>
                                                    </Grid>
                                                </Border>
                                            </Popup>
                                        </Grid>
                                    </Grid>
                                </Border>
                                <Border x:Name="MouseOverBorder" CornerRadius="1"
                        BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed" Opacity="1"
                        BorderBrush="{StaticResource Office2010BlueMouseOverBorderBrush}"/>
                                <Border x:Name="FocusBorder" CornerRadius="1" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Visibility="Collapsed" Opacity="1"
                        BorderBrush="{StaticResource Office2010BlueMouseOverBorderBrush}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="UIElement.IsMouseOver" Value="true">
                                    <Setter TargetName="PART_DropDown" Value="{StaticResource XComponentSelectBrush}" Property="Control.Background"/>
                                </Trigger>
                                <Trigger SourceName="PART_UpArrow" Property="UIElement.IsMouseOver" Value="true">
                                    <Setter TargetName="PART_UpArrow" Value="{DynamicResource MetroHoverBrush}" Property="Control.Background"/>
                                </Trigger>
                                <Trigger SourceName="PART_UpArrow" Property="ButtonBase.IsPressed" Value="true">
                                    <Setter TargetName="PART_UpArrow" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                                    <Setter TargetName="upbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                                    <Setter TargetName="upbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Stroke"/>
                                </Trigger>
                                <Trigger SourceName="PART_DownArrow" Property="UIElement.IsMouseOver" Value="true">
                                    <Setter TargetName="PART_DownArrow" Value="{DynamicResource MetroHoverBrush}" Property="Control.Background"/>
                                </Trigger>
                                <Trigger SourceName="PART_DownArrow" Property="ButtonBase.IsPressed" Value="true">
                                    <Setter TargetName="PART_DownArrow" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                                    <Setter TargetName="downbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                                    <Setter TargetName="downbuttonpath" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Stroke"/>
                                </Trigger>
                                <Trigger SourceName="PART_DropDown" Property="UIElement.IsMouseOver" Value="true">
                                    <Setter TargetName="PART_DropDown" Value="{DynamicResource MetroHoverBrush}" Property="Control.Background"/>
                                </Trigger>
                                <Trigger SourceName="PART_DropDown" Property="ButtonBase.IsPressed" Value="true">
                                    <Setter TargetName="PART_DropDown" Value="{StaticResource XComponentSelectBrush}" Property="Control.Background"/>
                                    <Setter TargetName="path1" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                                    <Setter TargetName="path1" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Stroke"/>
                                </Trigger>
                                <Trigger SourceName="PART_DropDown" Property="ToggleButton.IsChecked" Value="True">
                                    <Setter TargetName="PART_DropDown" Value="{DynamicResource MetroBrush}" Property="Control.Background"/>
                                    <Setter TargetName="path1" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Fill"/>
                                    <Setter TargetName="path1" Value="{DynamicResource MetroHighlightedForegroundBrush}" Property="Shape.Stroke"/>
                                </Trigger>
                                <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
                                    <Setter Value="{StaticResource ReadOnlyBackground}" Property="Control.Background"/>
                                    <Setter Value="{StaticResource ReadOnlyForeground}" Property="Control.Foreground"/>
                                </Trigger>
                                <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                                    <Setter Property="Control.Padding" Value="16,10,23,10"/>
                                    <Setter Property="Control.FontSize" Value="18"/>
                                    <Setter TargetName="PART_DropDown" Property="FrameworkElement.Width" Value="25"/>
                                    <Setter TargetName="Button_Today" Property="FrameworkElement.Height" Value="45"/>
                                    <Setter TargetName="Button_Calender" Property="FrameworkElement.Height" Value="45"/>
                                    <Setter TargetName="Button_Clock" Property="FrameworkElement.Height" Value="45"/>
                                    <Setter TargetName="Button_NoDate" Property="FrameworkElement.Height" Value="45"/>
                                    <Setter TargetName="Button_Today" Property="Control.FontSize" Value="18"/>
                                    <Setter TargetName="Button_Calender" Property="Control.FontSize" Value="18"/>
                                    <Setter TargetName="Button_Clock" Property="Control.FontSize" Value="18"/>
                                    <Setter TargetName="Button_NoDate" Property="Control.FontSize" Value="18"/>
                                    <Setter TargetName="Button_Calender" Property="FrameworkElement.Width" Value="80"/>
                                    <Setter TargetName="Button_Clock" Property="FrameworkElement.Width" Value="80"/>
                                    <Setter TargetName="Button_NoDate" Property="FrameworkElement.Width" Value="80"/>
                                    <Setter TargetName="Border" Property="UIElement.Effect">
                                        <Setter.Value>
                                            <DropShadowEffect Direction="315" ShadowDepth="2" Opacity="0.3"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type syncfusion:DateTimeEdit}" BasedOn="{StaticResource MetroDateTimeEditStyle}">
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentFontBrush}"></Setter>
        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"></Setter>
    </Style>

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{StaticResource ExpanderToggleButtonNormalBackground}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ExpanderToggleButtonNormalBorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Fill="{StaticResource MetroBackgroundBrush}"
                         Stroke="{StaticResource MetroExpanderBorderBrush}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 8,1.5 " HorizontalAlignment="Center"
                      SnapsToDevicePixels="false" Stroke="{StaticResource ModernButtonText}"
                      StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="true"
                                SnapsToDevicePixels="true" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource ModernButtonBorderHover}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ModernButtonTextHover}" TargetName="arrow" Property="Shape.Stroke"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ModernButtonIconBackgroundPressed}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ModernButtonBorderPressed}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{DynamicResource ModernButtonTextPressed}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Width" Value="45"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,3 L 11,12 20,3 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,11 L 11,1 20,11 "/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{StaticResource ExpanderToggleButtonNormalBackground}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ExpanderToggleButtonNormalBorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Fill="{StaticResource MetroBackgroundBrush}"
                         Stroke="{StaticResource MetroExpanderBorderBrush}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 8,1.5 " HorizontalAlignment="Center"
                      SnapsToDevicePixels="false" Stroke="{StaticResource ModernButtonText}"
                      StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="true"
                                SnapsToDevicePixels="true" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource ModernButtonBorderHover}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ModernButtonTextHover}" TargetName="arrow" Property="Shape.Stroke"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ModernButtonIconBackgroundPressed}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ModernButtonBorderPressed}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{DynamicResource ModernButtonTextPressed}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Width" Value="45"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,3 L 11,12 20,3 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,11 L 11,1 20,11 "/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{StaticResource ExpanderToggleButtonNormalBackground}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ExpanderToggleButtonNormalBorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Fill="{StaticResource MetroBackgroundBrush}"
                         Stroke="{StaticResource MetroExpanderBorderBrush}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 8,1.5 " HorizontalAlignment="Center"
                      SnapsToDevicePixels="false" Stroke="{StaticResource ModernButtonText}"
                      StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="true"
                                SnapsToDevicePixels="true" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource ModernButtonBorderHover}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ModernButtonTextHover}" TargetName="arrow" Property="Shape.Stroke"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ModernButtonIconBackgroundPressed}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ModernButtonBorderPressed}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{DynamicResource ModernButtonTextPressed}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Width" Value="45"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,3 L 11,12 20,3 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,11 L 11,1 20,11 "/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Width="19" Height="19" Stroke="{StaticResource MetroExpanderBorderBrush}"
                       HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource MetroBackgroundBrush}"/>
                            <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Stroke="{StaticResource ModernButtonText}" StrokeThickness="2"
                    SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
                            <ContentPresenter Grid.Column="1" Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                SnapsToDevicePixels="true" RecognizesAccessKey="true"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource ModernButtonBorderHover}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ModernButtonTextHover}" TargetName="arrow" Property="Shape.Stroke"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ModernButtonIconBackgroundPressed}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ModernButtonBorderPressed}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{DynamicResource ModernButtonTextPressed}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Width" Value="45"/>
                            <Setter TargetName="circle" Property="FrameworkElement.Height" Value="45"/>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,3 L 11,12 20,3 "/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 2,11 L 11,1 20,11 "/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroForegroundBrush}"/>
        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroBorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" CornerRadius="0" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                            Content="{TemplateBinding HeaderedContentControl.Header}" DockPanel.Dock="Top"
                            Foreground="{TemplateBinding Control.Foreground}" FontWeight="{TemplateBinding Control.FontWeight}"
                            FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                            FontStyle="{TemplateBinding Control.FontStyle}" FontStretch="{TemplateBinding Control.FontStretch}"
                            FontSize="{TemplateBinding Control.FontSize}" FontFamily="{TemplateBinding Control.FontFamily}"
                            HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="0"
                            MinWidth="0" MinHeight="0" Padding="{TemplateBinding Control.Padding}"
                            Style="{StaticResource ExpanderDownHeaderStyle}"
                            VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" Visibility="Collapsed"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Expander.IsExpanded" Value="true">
                            <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.FontSize" Value="18"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Excel-like filter -->

    <Style x:Key="BlendSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Control.Background" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0.1,0,0.1"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true" Height="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BlendMenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Control.Padding}"/>
                        </Border>
                        <RepeatButton Grid.Row="0" Grid.Column="0"
                          Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                            <UIElement.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              ConverterParameter="0">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </UIElement.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource UpArrow}"/>
                        </RepeatButton>
                        <RepeatButton Grid.Row="2" Grid.Column="0"
                          Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                            <UIElement.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              ConverterParameter="100">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </UIElement.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource DownArrow}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="MenuItemPressedBrush.Blend" Color="#FFAAAAAA"/>

    <syncfusiongrid:DatePickerVisibilityConverter x:Key="datePickerVisibilityConverter"/>
    <syncfusiongrid:ItemsSourceCountConverter x:Key="itemsSourceCountConverter"/>
    <syncfusiongrid:TextVisibilityConverter x:Key="textBlockVisibilityConverter"/>
    <syncfusionshared:BooleanToVisibilityConverterEx x:Key="booleanToVisibilityConverter"/>
    <SolidColorBrush x:Key="BrushWatermarkForeground" Color="#FF646464"/>
    <SolidColorBrush x:Key="Background" Color="{StaticResource XComponentExcelLikeFilterBackgroundColor}"/>
    <SolidColorBrush x:Key="VerticalLineBrush" Color="White"/>
    <SolidColorBrush x:Key="IconSeparator" Color="#FFA1A1A1"/>
    <SolidColorBrush x:Key="SeparatorBrush" Color="#FFA1A1A1"/>
    <SolidColorBrush x:Key="SortIconBorderBrush" Color="Black"/>
    <SolidColorBrush x:Key="SortIconBackgroundBrush" Color="#FFAAAAAA"/>
    <DataTemplate x:Key="MenuItemadv">
        <ContentControl HorizontalAlignment="Left" Content="{TemplateBinding ContentPresenter.Content}"/>
    </DataTemplate>
    <!--<Style TargetType="{x:Type MenuItem}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    </Style>-->
    <ControlTemplate x:Key="SubmenuContentBlend1" TargetType="{x:Type ContentControl}">
        <Border x:Name="ContentBorder" Background="{StaticResource XComponentExcelLikeFilterBackgroundBrush}" BorderBrush="{StaticResource FilterPopUpBorderBrush}" BorderThickness="1">
            <Grid>
                <ContentPresenter Margin="1,0"/>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style x:Key="BlendTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
        <Setter Property="Control.Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource XComponentBorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Bd" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3">
                        <ScrollViewer x:Name="PART_ContentHost" HorizontalAlignment="Left"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource DisabledBackground}" Property="Control.Background"/>
                            <Setter Value="{StaticResource DisabledBorderBrush}" Property="Control.BorderBrush"/>
                            <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
                            <Setter Value="{StaticResource ReadOnlyBackground}" Property="Control.Background"/>
                            <Setter Value="{StaticResource ReadOnlyBorderBrush}" Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="syncfusionshared:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="1,9"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SearchButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource XComponentBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Chrome" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0"
                  SnapsToDevicePixels="true">
                        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="syncfusionshared:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="11,8,11,8"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                            <Setter TargetName="Chrome" Property="Border.CornerRadius" Value="0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="syncfusionshared:SkinStorage.EnableTouch" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="syncfusionshared:SkinStorage.EnableTouch" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Chrome" Value="{StaticResource XComponentHighlightBrush}" Property="Border.Background"/>
                            <Setter TargetName="Chrome" Value="{StaticResource XComponentBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter Property="Control.Foreground" Value="Black"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Chrome" Value="{StaticResource XComponentSelectBrush}" Property="Border.Background"/>
                            <Setter TargetName="Chrome" Value="{StaticResource XComponentBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter Property="Control.Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Foreground" Value="#FF181717"/>
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BlendMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="{StaticResource XComponentBackgroundBrush}"/>
        <Setter Property="Control.Foreground" Value="#FFDCDCDC"/>
        <Setter Property="Control.Padding" Value="8,3,8,3"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="10" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="17"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle Name="Bg" Grid.ColumnSpan="4" Fill="{TemplateBinding Control.Background}"
                         Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1"/>
                            <ContentPresenter x:Name="Icon" Margin="1" VerticalAlignment="Center" ContentSource="Icon"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            <Path Name="Glyph" Grid.Column="0" Width="9" Height="11" Margin="3" Data="{StaticResource Checkmark}"
                    Fill="{StaticResource XComponentFontBrush}" FlowDirection="LeftToRight" Visibility="Collapsed"/>
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Control.Padding}" ContentSource="Header"
                                RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            <TextBlock Grid.Column="2" Margin="{TemplateBinding Control.Padding}"
                         Text="{TemplateBinding MenuItem.InputGestureText}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsChecked" Value="true">
                            <Setter TargetName="Glyph" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="Bg" Value="{StaticResource MenuItemPressedBrush.Blend}" Property="Shape.Fill"/>
                            <Setter Property="Control.Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                <Setter Property="Control.Padding" Value="7,2,8,3"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid SnapsToDevicePixels="true">
                                <Rectangle x:Name="OuterBorder" Fill="{TemplateBinding Control.Background}"
                           Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1"/>
                                <DockPanel>
                                    <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Path x:Name="GlyphPanel" Margin="7,0,0,0" VerticalAlignment="Center" Data="{StaticResource Checkmark}"
                        Fill="{TemplateBinding Control.Foreground}" FlowDirection="LeftToRight" Visibility="Collapsed"/>
                                    <ContentPresenter Margin="{TemplateBinding Control.Padding}" ContentSource="Header" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </DockPanel>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1"
                       Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-1"
                       IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                        <ContentControl Name="SubMenuBorder" IsTabStop="false" Template="{StaticResource SubmenuContentBlend1}">
                                            <ScrollViewer CanContentScroll="true" Style="{StaticResource BlendMenuScrollViewer}">
                                                <ItemsPresenter Margin="0" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle"
                                        KeyboardNavigation.TabNavigation="Cycle"
                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                            </ScrollViewer>
                                        </ContentControl>
                                    </themes:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="OuterBorder" Value="{StaticResource MenuItemPressedBrush.Blend}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                                    <Setter TargetName="OuterBorder" Value="{StaticResource MenuItemPressedBrush.Blend}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Property="UIElement.Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                <Setter Property="Control.Padding" Value="7,2,8,3"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid SnapsToDevicePixels="true">
                                <Rectangle x:Name="OuterBorder" Fill="{TemplateBinding Control.Background}"
                           Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1"/>
                                <DockPanel>
                                    <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Path x:Name="GlyphPanel" Margin="7,0,0,0" VerticalAlignment="Center" Data="{StaticResource Checkmark}"
                        Fill="{TemplateBinding Control.Foreground}" FlowDirection="LeftToRight" Visibility="Collapsed"/>
                                    <ContentPresenter Margin="{TemplateBinding Control.Padding}" ContentSource="Header" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </DockPanel>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="OuterBorder" Value="{StaticResource MenuItemPressedBrush.Blend}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                                    <Setter TargetName="OuterBorder" Value="{StaticResource MenuItemPressedBrush.Blend}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Property="UIElement.Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                <Setter Property="Control.Padding" Value="8,3,8,3"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="10" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition Width="17"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Name="Bg" Grid.ColumnSpan="4" Margin="1,0" Fill="{TemplateBinding Control.Background}"
                           Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1"/>
                                <ContentPresenter x:Name="Icon" Margin="1" VerticalAlignment="Center" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <Path Name="Glyph" Grid.Column="0" Width="9" Height="11" Margin="3" Data="{StaticResource Checkmark}"
                      Fill="{StaticResource XComponentFontBrush}" FlowDirection="LeftToRight" Visibility="Collapsed"/>
                                <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Control.Padding}" ContentSource="Header"
                                  RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <Path Grid.Column="3" Margin="4,0,6,0" VerticalAlignment="Center" Data="{StaticResource RightArrow}"
                      Fill="{TemplateBinding Control.Foreground}"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2"
                                   Placement="Right"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                   VerticalOffset="-3" 
                                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                        <ContentControl Name="SubMenuBorder" IsTabStop="false" Template="{StaticResource SubmenuContentBlend1}">
                                            <ScrollViewer CanContentScroll="true" Style="{StaticResource BlendMenuScrollViewer}">
                                                <ItemsPresenter Margin="2" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle"
                                        KeyboardNavigation.TabNavigation="Cycle"
                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                            </ScrollViewer>
                                        </ContentControl>
                                    </themes:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="Glyph" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsMouseOver" Value="true">
                                    <Setter TargetName="Bg" Value="{StaticResource MenuItemPressedBrush.Blend}" Property="Shape.Fill"/>
                                    <Setter Property="Control.Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Property="UIElement.Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuItem">
                <Setter Property="Control.Padding" Value="8,3,8,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <DataTemplate x:Key="Defaulttemplate">
        <StackPanel HorizontalAlignment="Stretch" Orientation="Horizontal">
            <CheckBox Margin="5,0,5,0" HorizontalAlignment="Left" VerticalAlignment="Center" Padding="10,0,0,0"
                gridcommon:VisualContainer.WantsMouseInput="True" Content="{Binding Name, Mode=TwoWay}"
                IsChecked="{Binding IsSelected, Mode=TwoWay}"/>
        </StackPanel>
    </DataTemplate>
    <Style x:Key="GridDataExcelLikeFilterPaneBlendStyle"
         TargetType="{x:Type syncfusiongrid:GridDataExcelLikeFilterPane}">
        <Setter Property="syncfusiongrid:GridDataExcelLikeFilterPane.ItemsTemplate" Value="{StaticResource Defaulttemplate}"/>
        <Setter Property="syncfusiongrid:GridDataExcelLikeFilterPane.Width" Value="280"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusiongrid:GridDataExcelLikeFilterPane}">
                    <Popup x:Name="PART_FilterPopup" Width="{TemplateBinding syncfusiongrid:GridDataExcelLikeFilterPane.Width}"
                 Height="{TemplateBinding syncfusiongrid:GridDataExcelLikeFilterPane.Height}" MinWidth="280" MinHeight="370"
                 AllowsTransparency="true" Placement="Bottom" PopupAnimation="Fade" VerticalOffset="1"
                 gridcommon:VisualContainer.WantsMouseInput="True"
                 IsOpen="{Binding Path=IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                 PlacementTarget="{Binding ElementName=toggleButton}"
                 StaysOpen="{Binding Path=StaysOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border x:Name="PART_FilterPopUpBorder" Background="{StaticResource Background}" BorderBrush="Gray"
                    BorderThickness="0.5">
                            <Border Name="IconBorder" Margin="27,0,0,10" BorderBrush="{StaticResource IconSeparator}"
                      BorderThickness="1,0,0,0">
                                <Grid Name="MainGrid" Margin="-27,0,0,-10">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}"/>
                                    </Grid.Resources>
                                    <Grid Row="0"
                        Visibility="{Binding SortOptionVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource booleanToVisibilityConverter}}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <MenuItem Name="PART_SortAscending" Grid.Row="0" Margin="2,1,2,1" Background="Transparent"
                              CommandParameter="Ascending" FontWeight="Normal"
                              Header="{TemplateBinding syncfusiongrid:GridDataExcelLikeFilterPane.AscendingSortString}"
                              HeaderTemplate="{StaticResource MenuItemadv}" IsCheckable="false"
                              Style="{StaticResource BlendMenuItemStyle}"
                              Command="{Binding SortMenuCommand, RelativeSource={RelativeSource TemplatedParent}}">
                                            <MenuItem.Icon>
                                                <Border Name="SortAscendingBorder" BorderBrush="Transparent" BorderThickness="1" CornerRadius="1">
                                                    <Grid x:Name="Sort_A_to_Z" Width="18" Height="18" Margin="1" HorizontalAlignment="Left"
                                VerticalAlignment="Top">
                                                        <Path Width="8.35" Height="8.026" HorizontalAlignment="Left" VerticalAlignment="Top"
                                  Data="F1 M 4.84775,5.78772 L 2.07043,5.78772 1.73962,6.55334 C 1.63162,6.80792 1.57816,7.01886 1.57816,7.18481 1.57816,7.40564 1.66666,7.5676 1.84509,7.67258 1.94934,7.73425 2.20578,7.78058 2.616,7.81125 L 2.616,8.026 0,8.026 0,7.81125 C 0.282684,7.76886 0.514404,7.65161 0.696686,7.46094 0.877777,7.2695 1.10159,6.87427 1.36856,6.27472 L 4.18106,0 4.29175,0 7.12778,6.44855 C 7.39856,7.05988 7.61987,7.44403 7.79443,7.60284 7.9259,7.72272 8.11081,7.7923 8.35031,7.81125 L 8.35031,8.026 4.54697,8.026 4.54697,7.81125 4.70322,7.81125 C 5.00925,7.81125 5.22269,7.76886 5.34644,7.68365 5.4324,7.62244 5.474,7.5332 5.474,7.41736 5.474,7.34763 5.46362,7.276 5.44016,7.20245 5.4324,7.16785 5.37375,7.02283 5.26575,6.76746 L 4.84775,5.78772 M 4.65109,5.3587 L 3.47922,2.65045 2.27347,5.3587 4.65109,5.3587 Z"
                                  Fill="White" Stretch="Fill"/>
                                                        <Path Width="7.521" Height="7.863" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                                  Data="F1 M 7.15628,9.884 L 2.53391,17.3065 4.03137,17.3065 C 4.7384,17.3065 5.23325,17.2623 5.51575,17.1731 5.97534,17.0339 6.37122,16.778 6.70456,16.405 7.03653,16.0319 7.26697,15.5319 7.39456,14.9056 L 7.61987,14.9056 7.30081,17.7474 0.0990906,17.7474 4.72668,10.3131 3.56125,10.3131 C 3.10815,10.3131 2.81125,10.3268 2.668,10.3535 2.39722,10.4043 2.14334,10.5032 1.90506,10.6523 1.668,10.8014 1.47012,10.9994 1.31387,11.2467 1.15762,11.4941 1.03391,11.8072 0.945343,12.1862 L 0.73056,12.1862 0.945343,9.884 7.15628,9.884 Z"
                                  Fill="White" Stretch="Fill"/>
                                                        <Path Width="10.036" Height="18" HorizontalAlignment="Right" VerticalAlignment="Top"
                                  Data="M 4.0410149,0 L 5.9969907,0 5.9969907,15.196013 8.8930061,12.299996 10.03601,13.439998 5.0239922,18.450996 5.0174115,18.444404 5.009824,18.452011 0,13.440192 1.1351867,12.303006 4.0410149,15.208251 Z"
                                  Fill="White" Stretch="Fill"/>
                                                    </Grid>
                                                </Border>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Name="PART_SortDescending" Grid.Row="1" Margin="2,1,2,1" Background="Transparent"
                              CommandParameter="Descending" FontWeight="Normal"
                              Header="{TemplateBinding syncfusiongrid:GridDataExcelLikeFilterPane.DescendingSortString}"
                              HeaderTemplate="{StaticResource MenuItemadv}" IsCheckable="false"
                              Style="{StaticResource BlendMenuItemStyle}"
                              Command="{Binding SortMenuCommand, RelativeSource={RelativeSource TemplatedParent}}">
                                            <MenuItem.Icon>
                                                <Border Name="SortDescendingBorder" BorderBrush="Transparent" BorderThickness="1" CornerRadius="1">
                                                    <Grid x:Name="Sort_Z_to_A" Width="18" Height="18" Margin="1" HorizontalAlignment="Left"
                                VerticalAlignment="Top">
                                                        <Path Width="10.036" Height="18" HorizontalAlignment="Right" VerticalAlignment="Top"
                                  Data="M 4.0419773,0 L 5.9979837,0 5.9979837,15.195082 8.8931761,12.299996 10.035993,13.439998 5.0247957,18.450996 5.0174028,18.443595 5.009003,18.452011 0,13.440192 1.1360006,12.303006 4.0419773,15.208875 Z"
                                  Fill="White" Stretch="Fill"/>
                                                        <Path Width="7.521" Height="7.863" HorizontalAlignment="Left" VerticalAlignment="Top"
                                  Data="F1 M 7.15628,0 L 2.53384,7.42252 4.03131,7.42252 C 4.73828,7.42252 5.23306,7.37827 5.51563,7.28906 5.97534,7.14975 6.37109,6.89383 6.70441,6.52097 7.03653,6.14786 7.26691,5.64786 7.39453,5.02145 L 7.61987,5.02145 7.30081,7.86331 0.098938,7.86331 4.7265,0.429077 3.56119,0.429077 C 3.10815,0.429077 2.81119,0.44278 2.668,0.469452 2.39722,0.520264 2.14319,0.619171 1.90494,0.76828 1.668,0.917358 1.47012,1.11536 1.31387,1.36267 1.15759,1.61014 1.03384,1.92322 0.945343,2.30212 L 0.73053,2.30212 0.945343,0 7.15628,0 Z"
                                  Fill="White" Stretch="Fill"/>
                                                        <Path Width="8.35" Height="8.026" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                                  Data="F1 M 4.84772,15.3464 L 2.07037,15.3464 1.73962,16.112 C 1.63159,16.3665 1.57813,16.5774 1.57813,16.7436 1.57813,16.9642 1.66666,17.1264 1.84509,17.2312 1.94922,17.2931 2.20572,17.3392 2.61588,17.3699 L 2.61588,17.5847 0,17.5847 0,17.3699 C 0.282532,17.3274 0.514404,17.2102 0.696655,17.0196 0.877594,16.8281 1.10159,16.4329 1.36853,15.8333 L 4.18106,9.55862 4.29175,9.55862 7.12759,16.0072 C 7.39856,16.6185 7.61987,17.0027 7.79425,17.1615 7.92584,17.2813 8.11066,17.351 8.35025,17.3699 L 8.35025,17.5847 4.54694,17.5847 4.54694,17.3699 4.70319,17.3699 C 5.00919,17.3699 5.22266,17.3274 5.34637,17.2423 5.43228,17.1811 5.474,17.0918 5.474,16.976 5.474,16.9063 5.46362,16.8347 5.44012,16.7611 5.43228,16.7267 5.37372,16.5815 5.26563,16.3263 L 4.84772,15.3464 M 4.65106,14.9174 L 3.47919,12.2091 2.27347,14.9174 4.65106,14.9174 Z"
                                  Fill="White" Stretch="Fill"/>
                                                    </Grid>
                                                </Border>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <Separator Grid.Row="2" Margin="27,3,0,3" Background="{StaticResource SeparatorBrush}"
                               Style="{StaticResource BlendSeparatorStyle}"/>
                                    </Grid>
                                    <Grid Row="1"
                        Visibility="{Binding ClearFilterVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource booleanToVisibilityConverter}}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <MenuItem x:Name="PART_MenuItem" Grid.Row="0" Margin="2,1,2,1" Background="Transparent"
                              HeaderTemplate="{StaticResource MenuItemadv}" StaysOpenOnClick="true" Style="{StaticResource BlendMenuItemStyle}"
                               gridcommon:VisualContainer.WantsMouseInput="True"
                              Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.ClearFilter}}"
                              IsEnabled="{Binding ClearFilterEnable, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                            <MenuItem.Icon>
                                                <Grid Width="18" Height="18">
                                                    <Path Name="FilterIcon" Width="14" Height="14" Margin="0,0,0,0" HorizontalAlignment="Left"
                                VerticalAlignment="Bottom"
                                Data="M 2.1800003,10.184 L 57.141998,10.184 35.958511,34.801016 35.958511,63.999998 23.938971,57.128946 23.938971,34.23332 M 1.3333101,0 L 57.834602,0 C 58.571701,0 59.167999,0.59620857 59.167999,1.3332119 L 59.167999,2.8877583 C 59.167999,3.6246438 58.571701,4.2209997 57.834602,4.2209997 L 1.3333101,4.2209997 C 0.59637535,4.2209997 2.3841858E-07,3.6246438 0,2.8877583 L 0,1.3332119 C 2.3841858E-07,0.59620857 0.59637535,0 1.3333101,0 Z"
                                Fill="#FF231F20" Stretch="Fill"/>
                                                    <Path Name="ClearIcon" Width="10" Height="10" Margin="8,4,0,2" HorizontalAlignment="Left"
                                VerticalAlignment="Bottom"
                                Data="F1 M 510.03,310.087 C 506.354,314.529 503.16,319.035 499.905,323.545 495.632,319.748 491.185,316.094 486.655,312.753 L 481.322,322.087 C 486.352,323.854 491.009,326.549 495.447,329.587 491.403,335.553 487.585,341.655 483.989,348.003 L 487.989,350.087 C 492.796,344.209 497.184,339.05 501.78,334.253 507.16,338.72 512.09,343.726 516.53,348.753 L 518.655,346.087 C 515.685,340.248 511.34,334.821 506.405,329.712 510.176,326.125 514.124,322.699 518.655,319.42 L 510.03,310.087 Z"
                                RenderTransformOrigin="0.5,0.5" Stretch="Fill" StrokeMiterLimit="2.75" StrokeThickness="1.33333">
                                                        <UIElement.RenderTransform>
                                                            <TransformGroup>
                                                                <ScaleTransform/>
                                                                <SkewTransform/>
                                                                <RotateTransform Angle="9.814"/>
                                                                <TranslateTransform/>
                                                            </TransformGroup>
                                                        </UIElement.RenderTransform>
                                                        <Shape.Fill>
                                                            <LinearGradientBrush StartPoint="0.175313,0.318066" EndPoint="0.942628,0.318066">
                                                                <Brush.RelativeTransform>
                                                                    <TransformGroup>
                                                                        <SkewTransform AngleX="-3.88056" AngleY="0" CenterX="0.175313" CenterY="0.318066"/>
                                                                        <RotateTransform Angle="37.69" CenterX="0.175313" CenterY="0.318066"/>
                                                                    </TransformGroup>
                                                                </Brush.RelativeTransform>
                                                                <GradientStop Offset="0" Color="#FFF20000"/>
                                                                <GradientStop Offset="1" Color="#FFC30000"/>
                                                            </LinearGradientBrush>
                                                        </Shape.Fill>
                                                    </Path>
                                                </Grid>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <Separator Grid.Row="1" Margin="27,3,0,3" Background="{StaticResource SeparatorBrush}"
                               Style="{StaticResource BlendSeparatorStyle}"/>
                                    </Grid>
                                    <Grid Row="2"
                        Visibility="{Binding AdvanceFilteringOptionVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource booleanToVisibilityConverter}}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <MenuItem x:Name="AdvanceFilter" Grid.Row="0" Margin="2,1,0,1" Background="Transparent"
                              Header="{TemplateBinding syncfusiongrid:GridDataExcelLikeFilterPane.ColumnType}"
                              Style="{StaticResource BlendMenuItemStyle}">
                                            <HeaderedItemsControl.HeaderTemplate>
                                                <DataTemplate>
                                                    <ContentControl Margin="12,0,0,0" HorizontalAlignment="Left" Content="{TemplateBinding ContentPresenter.Content}"/>
                                                </DataTemplate>
                                            </HeaderedItemsControl.HeaderTemplate>
                                            <MenuItem Name="Equals" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.EqualsSmall}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.EqualsString}}"/>
                                            <MenuItem Name="NotEquals" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.DoesNotEquals}" 
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.DoesNotEqual}}"/>
                                            <Separator Background="{StaticResource SeparatorBrush}" Style="{StaticResource BlendSeparatorStyle}"/>
                                            <MenuItem Name="Before" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.isbefore}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Before}}"/>
                                            <MenuItem Name="After" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.isafter}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.After}}"/>
                                            <MenuItem Name="GreaterThan" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.IsGreaterThan}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.GreaterThan}}"/>
                                            <MenuItem Name="GreaterThanOrEqual" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.IsGreaterThanOrEqualto}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.GreaterThanOrEqualTo}}"/>
                                            <MenuItem Name="LessThan" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.IsLessThan}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.LessThanWithSpace}}"/>
                                            <MenuItem Name="LessThanOrEqual" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.IsLessThanorEqualto}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.LessThanOrEqualTo}}"/>
                                            <MenuItem Name="Between" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.Between}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Between}}"/>
                                            <MenuItem Name="BeginsWith" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.BeginsWith}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.BeginsWithCaps}}"/>
                                            <MenuItem Name="EndsWith" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.EndsWithSmall}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.EndsWithCaps}}"/>
                                            <Separator Background="{StaticResource SeparatorBrush}" Style="{StaticResource BlendSeparatorStyle}"/>
                                            <MenuItem Name="Tomorrow" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.Tomorrow}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Tomorrow}}"/>
                                            <MenuItem Name="Today" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.Today}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Today}}"/>
                                            <MenuItem Name="Yesterday" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.Yesterday}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Yesterday}}"/>
                                            <MenuItem Name="AboveAverage" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.AboveAverage}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.AboveAverage}}"/>
                                            <MenuItem Name="BelowAverage" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.BelowAverage}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.BelowAverage}}"/>
                                            <MenuItem Name="Contains" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.ContainsSmall}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Contains}}"/>
                                            <Separator Name="DateTimeSeparator" Background="{StaticResource SeparatorBrush}"
                                 Style="{StaticResource BlendSeparatorStyle}"/>
                                            <MenuItem Name="NextWeek" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.NextWeek}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.NextWeek}}"/>
                                            <MenuItem Name="ThisWeek" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.ThisWeek}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.ThisWeek}}"/>
                                            <MenuItem Name="LastWeek" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.LastWeek}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.LastWeek}}"/>
                                            <Separator Name="MonthDateTimeSeparator" Background="{StaticResource SeparatorBrush}"
                                 Style="{StaticResource BlendSeparatorStyle}"/>
                                            <MenuItem Name="NextMonth" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.NextMonth}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.NextMonth}}"/>
                                            <MenuItem Name="ThisMonth" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.ThisMonth}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.ThisMonth}}"/>
                                            <MenuItem Name="LastMonth" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.LastMonth}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.LastMonth}}"/>
                                            <Separator Name="YearDateTimeSeparator" Background="{StaticResource SeparatorBrush}"
                                 Style="{StaticResource BlendSeparatorStyle}"/>
                                            <MenuItem Name="NextYear" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.NextYear}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.NextYear}}"/>
                                            <MenuItem Name="ThisYear" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.ThisYear}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.ThisYear}}"/>
                                            <MenuItem Name="LastYear" Background="Transparent" Style="{StaticResource BlendMenuItemStyle}"
                                CommandParameter="{x:Static syncfusiongrid:GridDataResourceWrapper.LastYear}"
                                HeaderTemplate="{StaticResource MenuItemadv}"
                                Command="{Binding ClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Header="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.LastYear}}"/>
                                        </MenuItem>
                                        <Separator Name="ExpanderSeparator" Grid.Row="1" Margin="27,3,0,3"
                               Background="{StaticResource SeparatorBrush}" Style="{StaticResource BlendSeparatorStyle}"/>
                                    </Grid>
                                    <Grid Name="ListBoxPart" Row="3" Margin="20,0,0,0">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>
                                        <Grid Row="0"
                          Visibility="{Binding SearchOptionVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource booleanToVisibilityConverter}}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox x:Name="Part_SearchTextBox" Grid.Column="0" MinHeight="20" Margin="10,0,10,0"
                               HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
                               Style="{StaticResource BlendTextBoxStyle}" gridcommon:VisualContainer.WantsMouseInput="True"/>
                                            <TextBlock x:Name="Part_textBlock" Grid.Column="0" Margin="14,2,2,2" HorizontalAlignment="Left"
                                 Foreground="{StaticResource BrushWatermarkForeground}" IsHitTestVisible="false"
                                 Text="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Search}}"
                                 Visibility="{Binding Text, ElementName=Part_SearchTextBox, Converter={StaticResource textBlockVisibilityConverter}}"/>
                                            <Border x:Name="SearchPathBorder" Grid.Column="1" Width="20" Height="20" Margin="-40,0,0,0"
                              Visibility="Collapsed">
                                                <Path Width="10" Height="10"
                              Data="F1 M 54.8672,51.2266 L 42.1145,36.0703 C 44.2473,33.3333 45.6692,29.9946 46.0469,26.2942 47.1016,15.8333 39.4948,6.49219 29.0313,5.43213 18.5729,4.37231 9.2395,11.9868 8.17188,22.4453 7.10938,32.9036 14.7291,42.2446 25.1875,43.3098 28.6692,43.6563 32.0416,43.0469 35.0051,41.6797 L 47.9244,57.0547 C 49.5416,58.9634 52.401,59.2134 54.3125,57.6094 56.2266,55.9973 56.4766,53.1348 54.8672,51.2266 M 15.9219,23.1614 C 16.5547,16.9399 22.1094,12.4087 28.3333,13.0391 34.5573,13.6719 39.0781,19.2266 38.4453,25.4426 37.8098,31.6692 32.2708,36.1953 26.0416,35.5703 19.8203,34.9399 15.2891,29.3828 15.9219,23.1614 "
                              Fill="White" Stretch="Uniform"/>
                                            </Border>
                                            <Button x:Name="PART_SearchButton" Grid.Column="1" Width="20" Height="20" Margin="-40,0,0,0"
                              HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center"
                              VerticalContentAlignment="Center" Style="{StaticResource SearchButtonStyle}">
                                                <Path x:Name="Cross" Width="8" Height="8" Margin="0,0,0,0"
                              Data="F1 M 54.0573,47.8776 L 38.1771,31.9974 54.0547,16.1198 C 55.7604,14.4141 55.7604,11.6511 54.0573,9.94531 52.3516,8.23962 49.5859,8.23962 47.8802,9.94531 L 32.0026,25.8229 16.1224,9.94531 C 14.4167,8.23962 11.6511,8.23962 9.94794,9.94531 8.24219,11.6511 8.24219,14.4141 9.94794,16.1198 L 25.8255,32 9.94794,47.8776 C 8.24219,49.5834 8.24219,52.3477 9.94794,54.0534 11.6511,55.7572 14.4167,55.7585 16.1224,54.0534 L 32.0026,38.1745 47.8802,54.0534 C 49.5859,55.7585 52.3516,55.7572 54.0573,54.0534 55.7604,52.3477 55.763,49.5834 54.0573,47.8776 Z"
                              Fill="White" Stretch="Uniform">
                                                    <UIElement.RenderTransform>
                                                        <TransformGroup>
                                                            <TransformGroup.Children>
                                                                <RotateTransform Angle="0"/>
                                                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                            </TransformGroup.Children>
                                                        </TransformGroup>
                                                    </UIElement.RenderTransform>
                                                </Path>
                                            </Button>
                                        </Grid>
                                        <ItemsControl x:Name="PART_ItemsControl" Grid.Row="1" Margin="10,2,10,2" HorizontalAlignment="Stretch"
                                  HorizontalContentAlignment="Stretch" BorderBrush="Gray" BorderThickness="0.7"
                                  ItemTemplate="{TemplateBinding syncfusiongrid:GridDataExcelLikeFilterPane.ItemsTemplate}"
                                  ItemsSource="{TemplateBinding syncfusiongrid:GridDataExcelLikeFilterPane.ItemsSource}"
                                  gridcommon:VisualContainer.WantsMouseInput="True">
                                            <Control.Template>
                                                <ControlTemplate TargetType="{x:Type ItemsControl}">
                                                    <Border Background="{StaticResource Background}" BorderBrush="{TemplateBinding Control.BorderBrush}"
                                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                                                        <ScrollViewer x:Name="scrollViewer" HorizontalAlignment="Stretch" CanContentScroll="true"
                                          HorizontalScrollBarVisibility="Auto" Padding="2" SnapsToDevicePixels="true"
                                          VerticalScrollBarVisibility="Auto">
                                                            <ItemsPresenter Margin="0,18,0,0" ClipToBounds="true"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                        </ScrollViewer>
                                                    </Border>
                                                </ControlTemplate>
                                            </Control.Template>
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <syncfusiongrid:VirtualizingItemsPanel HorizontalAlignment="Stretch" IsItemsHost="true"
                                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>
                                        <Border x:Name="border" Grid.Row="1" Margin="11.5,3,10,-19" HorizontalAlignment="Left"
                            VerticalAlignment="Top" gridcommon:VisualContainer.WantsMouseInput="True">
                                            <StackPanel Margin="1,2,0,1" HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Horizontal">
                                                <CheckBox x:Name="PART_CheckBox" Margin="5,0,5,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                  Content="{x:Static syncfusiongrid:GridDataResourceWrapper.SelectAllFilter}" Padding="10,0,0,0"/>
                                            </StackPanel>
                                        </Border>
                                        <TextBlock x:Name="textBlock" Grid.Row="1" Margin="30,20,0,-19" HorizontalAlignment="Left"
                               VerticalAlignment="Top" Background="{StaticResource Background}" Foreground="#FFA1A1A1" Text=""/>
                                    </Grid>
                                    <StackPanel Grid.Row="4" Margin="0,10,10,5" HorizontalAlignment="Right" Orientation="Horizontal"
                              Visibility="{Binding OkCancelButtonVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource booleanToVisibilityConverter}}">
                                        <Button Name="PART_OkButton" MinWidth="64" MinHeight="20" HorizontalAlignment="Center"
                            HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                            gridcommon:VisualContainer.WantsMouseInput="True" Style="{StaticResource {x:Type Button}}"
                            Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.OK}}"/>
                                        <Button Name="PART_CancelButton" MinWidth="65" MinHeight="20" Margin="7,0,0,0" HorizontalAlignment="Center"
                            HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                            gridcommon:VisualContainer.WantsMouseInput="True" Style="{StaticResource {x:Type Button}}"
                            Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Cancel}}"/>
                                    </StackPanel>
                                    <Border Name="ResizeBorder" Grid.Row="5" BorderBrush="{StaticResource FilterPopUpBorderBrush}" BorderThickness="0.5"
                          Visibility="{Binding ResizingOptionVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource booleanToVisibilityConverter}}">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStop Offset="0" Color="Transparent"/>
                                                    <GradientStop Offset="1" Color="{StaticResource FilterPopUpResizingBorderColor}"/>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Border.Background>
                                        <Thumb Name="PART_ResizingThumb" Width="40" Height="8" HorizontalAlignment="Right"
                           HorizontalContentAlignment="Right" Cursor="SizeNWSE" IsHitTestVisible="true"
                           gridcommon:VisualContainer.WantsMouseInput="True">
                                            <Control.Template>
                                                <ControlTemplate>
                                                    <Grid Background="Transparent">
                                                        <ResizeGrip Width="5" HorizontalAlignment="Right" VerticalAlignment="Stretch" IsHitTestVisible="false"/>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Control.Template>
                                        </Thumb>
                                    </Border>
                                </Grid>
                            </Border>
                        </Border>
                    </Popup>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Static syncfusiongrid:GridDataResourceWrapper.TextFilters}"
                     Property="syncfusiongrid:GridDataExcelLikeFilterPane.ColumnType">
                            <Setter TargetName="Equals" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="NotEquals" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="GreaterThan" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="GreaterThanOrEqual" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LessThan" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LessThanOrEqual" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Between" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="BeginsWith" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="EndsWith" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="AboveAverage" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="BelowAverage" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Contains" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Before" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="After" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Tomorrow" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Today" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Yesterday" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="DateTimeSeparator" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="NextWeek" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="ThisWeek" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LastWeek" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="MonthDateTimeSeparator" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="NextMonth" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="ThisMonth" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LastMonth" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="YearDateTimeSeparator" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="NextYear" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="ThisYear" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LastYear" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Value="{x:Static syncfusiongrid:GridDataResourceWrapper.NumberFilters}"
                     Property="syncfusiongrid:GridDataExcelLikeFilterPane.ColumnType">
                            <Setter TargetName="Equals" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="NotEquals" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="GreaterThan" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="GreaterThanOrEqual" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="LessThan" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="LessThanOrEqual" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Between" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="BeginsWith" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="EndsWith" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="AboveAverage" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="BelowAverage" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Contains" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Before" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="After" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Tomorrow" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Today" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Yesterday" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="DateTimeSeparator" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="NextWeek" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="ThisWeek" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LastWeek" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="MonthDateTimeSeparator" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="NextMonth" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="ThisMonth" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LastMonth" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="YearDateTimeSeparator" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="NextYear" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="ThisYear" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LastYear" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Value="{x:Static syncfusiongrid:GridDataResourceWrapper.DateFilters}"
                     Property="syncfusiongrid:GridDataExcelLikeFilterPane.ColumnType">
                            <Setter TargetName="Equals" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="NotEquals" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="GreaterThan" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="GreaterThanOrEqual" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LessThan" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LessThanOrEqual" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Between" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="BeginsWith" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="EndsWith" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="AboveAverage" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="BelowAverage" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Contains" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Before" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="After" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Tomorrow" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Today" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Yesterday" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="DateTimeSeparator" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="NextWeek" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="ThisWeek" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="LastWeek" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="MonthDateTimeSeparator" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="NextMonth" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="ThisMonth" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="LastMonth" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="YearDateTimeSeparator" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="NextYear" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="ThisYear" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="LastYear" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger SourceName="ResizeBorder" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PART_FilterPopup" Property="Popup.StaysOpen" Value="true"/>
                        </Trigger>
                        <Trigger SourceName="AdvanceFilter" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="AdvanceFilter" Property="MenuItem.IsSubmenuOpen" Value="true"/>
                        </Trigger>
                        <Trigger SourceName="AdvanceFilter" Property="UIElement.IsMouseOver" Value="false">
                            <Setter TargetName="AdvanceFilter" Property="MenuItem.IsSubmenuOpen" Value="false"/>
                        </Trigger>
                        <Trigger Property="syncfusiongrid:GridDataExcelLikeFilterPane.SortOrder" Value="Ascending">
                            <Setter TargetName="SortAscendingBorder" Value="{StaticResource SortIconBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="SortAscendingBorder" Value="{StaticResource SortIconBorderBrush}"
                      Property="Border.BorderBrush"/>
                            <Setter TargetName="SortDescendingBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SortDescendingBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="syncfusiongrid:GridDataExcelLikeFilterPane.SortOrder" Value="Descending">
                            <Setter TargetName="SortDescendingBorder" Value="{StaticResource SortIconBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="SortDescendingBorder" Value="{StaticResource SortIconBorderBrush}"
                      Property="Border.BorderBrush"/>
                            <Setter TargetName="SortAscendingBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SortAscendingBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger SourceName="PART_MenuItem" Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="FilterIcon" Property="Shape.Fill" Value="#FFA1A1A1"/>
                            <Setter TargetName="ClearIcon" Property="Shape.Fill" Value="#FFA1A1A1"/>
                        </Trigger>
                        <DataTrigger Value="false">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource itemsSourceCountConverter}">
                                    <Binding ElementName="PART_ItemsControl" Path="ItemsSource"/>
                                    <Binding Path="ExcelLikeFilterAdvVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="textBlock"
                      Value="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.NoItemMatch}}"
                      Property="TextBlock.Text"/>
                            <Setter TargetName="border" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger SourceName="Part_SearchTextBox" Property="TextBox.Text" Value="">
                            <Setter TargetName="SearchPathBorder" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_SearchButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="syncfusiongrid:GridDataExcelLikeFilterPane.ExcelLikeFilterAdvVisibility" Value="false">
                            <Setter TargetName="PART_FilterPopup" Property="FrameworkElement.MinWidth" Value="240"/>
                            <Setter TargetName="PART_FilterPopup" Property="FrameworkElement.MinHeight" Value="260"/>
                            <Setter TargetName="PART_FilterPopup" Property="FrameworkElement.Width" Value="240"/>
                            <Setter TargetName="PART_FilterPopup" Property="FrameworkElement.Height" Value="260"/>
                            <Setter TargetName="PART_FilterPopUpBorder" Property="FrameworkElement.Margin" Value="0"/>
                            <Setter TargetName="ListBoxPart" Property="FrameworkElement.Margin" Value="0"/>
                            <Setter TargetName="IconBorder" Property="FrameworkElement.Margin" Value="0"/>
                            <Setter TargetName="IconBorder" Property="Border.BorderThickness" Value="0"/>
                            <Setter TargetName="MainGrid" Property="FrameworkElement.Margin" Value="0"/>
                            <Setter TargetName="PART_FilterPopUpBorder" Property="Border.BorderThickness" Value="0"/>
                            <Setter TargetName="textBlock" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_ItemsControl" Property="FrameworkElement.Margin" Value="0"/>
                            <Setter TargetName="border" Property="FrameworkElement.Margin" Value="1.5,1,0,-17"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource GridDataExcelLikeFilterPaneBlendStyle}"
         TargetType="{x:Type syncfusiongrid:GridDataExcelLikeFilterPane}"/>
    <Style x:Key="XComponentWindowBlendStyle" TargetType="{x:Type syncfusiongrid:AdvanceFilteringWindow}">
        <Setter Property="FrameworkElement.Width" Value="750"/>
        <Setter Property="FrameworkElement.Height" Value="230"/>
        <Setter Property="Window.ResizeMode" Value="NoResize"/>
        <Setter Property="Window.Title"
            Value="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.CustomAutoFilter}}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusiongrid:AdvanceFilteringWindow}">
                    <Border Background="{StaticResource XComponentBackgroundBrush}"
                  BorderBrush="{StaticResource XComponentBorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <AdornerDecorator>
                            <Grid>
                                <Border Name="MainBorder" Background="{StaticResource XComponentBackgroundBrush}">
                                    <Grid Background="{StaticResource XComponentBackgroundBrush}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <TextBlock Grid.Row="0" Margin="10,5,0,0"
                               Text="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.ShowRowsWhere}}"/>
                                        <Grid Row="1" Margin="20,5,0,0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Grid.Column="0" Margin="0,0,3,0" VerticalAlignment="Center"
                                 Text="{Binding ColumnName, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Separator Grid.Column="1" VerticalAlignment="Center"/>
                                        </Grid>
                                        <Grid Row="2" Margin="30,3,0,5">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <ComboBox Grid.Column="0" Width="160" Margin="0,0,5,0" VerticalAlignment="Center"
                                ItemsSource="{Binding ComboBoxItems}"
                                SelectedItem="{Binding FilterPredicateSelectedItem1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Grid Column="1" Width="540">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ComboBox Grid.Column="0" Margin="5,0,0,0" VerticalAlignment="Center" DisplayMemberPath="Name"
                                  IsEditable="true" ItemsSource="{Binding FilterElement}"
                                  SelectedItem="{Binding FilterValueSelectedItem1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Text="{Binding FilterValue1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                <syncfusionshared:DateTimeEdit Grid.Column="1" Width="20"
                                               Text="{Binding FilterValue1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                               Visibility="{Binding ColumnType, Converter={StaticResource datePickerVisibilityConverter}}"/>
                                            </Grid>
                                        </Grid>
                                        <Grid Row="3" Margin="50,5,10,0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <RadioButton Grid.Column="0" IsChecked="True"
                                   Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.AND}}"/>
                                            <RadioButton Grid.Column="1" Margin="5,0,0,0"
                                   Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.OR}}"
                                   IsChecked="{Binding IsOrChecked}"/>
                                        </Grid>
                                        <Grid Row="4" Margin="30,3,0,5">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <ComboBox Grid.Column="0" Width="160" Height="21.96" Margin="0,0,5,0" ItemsSource="{Binding ComboBoxItems}"
                                SelectedItem="{Binding FilterPredicateSelectedItem2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Grid Column="1" Width="540">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ComboBox Grid.Column="0" Margin="5,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                                  DisplayMemberPath="Name" IsEditable="true" ItemsSource="{Binding FilterElement}"
                                  SelectedItem="{Binding FilterValueSelectedItem2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Text="{Binding FilterValue2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                <syncfusionshared:DateTimeEdit Grid.Column="1" Width="20"
                                               Text="{Binding FilterValue2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                               Visibility="{Binding ColumnType, Converter={StaticResource datePickerVisibilityConverter}}"/>
                                            </Grid>
                                        </Grid>
                                        <StackPanel Grid.Row="5" Margin="10,5,10,10" HorizontalAlignment="Right" Orientation="Horizontal">
                                            <Button Name="Part_OkButton" Width="80" Margin="0,0,5,0"
                              Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.OK}}"/>
                                            <Button Width="80" Margin="5,0,0,0" IsCancel="true"
                              Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Cancel}}"/>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                            </Grid>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource XComponentWindowBlendStyle}" TargetType="{x:Type syncfusiongrid:AdvanceFilteringWindow}"/>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{StaticResource XComponentFontBrush}"
                     StrokeDashArray="1 2" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <syncfusiongrid:DateTimeFilterPaneHeightConverter x:Key="HeightConverter"/>
    <syncfusiongrid:DateTimeFilterPaneVisibleHeightConverter x:Key="VisibleHeightConverter"/>
    <syncfusiongrid:DateTimeVisiblityConverter x:Key="VisiblityConverter"/>
    <SolidColorBrush x:Key="brushWatermarkBackground" Color="White"/>
    <SolidColorBrush x:Key="brushWatermarkForeground" Color="LightSteelBlue"/>
    <!--<syncfusiongrid:GridDataDoubleToIntegerConverter x:Key="DoubleToIntConverter"/>-->
    <converters:DoubleToIntegerConverter x:Key="DoubleToIntConverter"/>

    <Style x:Key="FilterPopUpCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Foreground" Value="{StaticResource FilterPopUpCloseForegroundBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="brdBack" Height="15" Width="15" Margin="0,0,0,0" BorderThickness="1"
                  Background="{TemplateBinding Control.Background}" BorderBrush="Transparent" SnapsToDevicePixels="True">
                        <Path Name="pathButton" SnapsToDevicePixels="True" Stretch="Fill"  StrokeThickness="1.5"
                  Stroke="{TemplateBinding Control.Foreground}" Data="M 109,51 L 216,142 M 215,52 L 109,142 "
                  HorizontalAlignment="Center" VerticalAlignment="Center"  Width="8" Height="8"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="brdBack" Property="UIElement.Opacity" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="pathButton" Value="{StaticResource FilterPopUpCloseMouseoverForegroundBrush}" Property="Shape.Stroke"/>
                            <Setter TargetName="brdBack" Value="{StaticResource FilterPopUpCloseMouseoverBackgroundBrush}" Property="Border.Background"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EntryFieldStyle" TargetType="{x:Type Grid}">
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="GridDataDateTimeFilteringPaneStyle"
         TargetType="{x:Type syncfusiongrid:GridDataDateTimeFilteringPane}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusiongrid:GridDataDateTimeFilteringPane}">
                    <Border Width="230" Background="{StaticResource Background}" BorderBrush="Gray" BorderThickness="0.5"
                  CornerRadius="0,4,0,4">
                        <Grid x:Name="LayoutRoot" Margin="5,0,5,5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="{Binding ElementName=PART_ComboBox, Path=SelectedValue, Converter={StaticResource VisibleHeightConverter}}"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}"/>
                                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>
                                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}"/>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}"/>
                                <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MetroToolTipStyle}"/>
                            </Grid.Resources>
                            <Button x:Name="PART_CloseButton" Grid.Row="0" Width="15" Height="15" Margin="0,2,-3,0"
                      HorizontalAlignment="Right" VerticalAlignment="Top" BorderBrush="White" BorderThickness="0"
                      Panel.ZIndex="1" Style="{StaticResource FilterPopUpCloseButtonStyle}" ToolTip="Close"/>
                            <Border Grid.Row="1" Margin="3">
                                <StackPanel Orientation="Horizontal">
                                    <RadioButton x:Name="PART_ORRadioButton" Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.OR}}"/>
                                    <RadioButton x:Name="PART_ANDRadioButton" Margin="10,0,0,0"
                               Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.AND}}"/>
                                </StackPanel>
                            </Border>
                            <ComboBox Name="PART_ComboBox" Grid.Row="2" Margin="3" HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch" IsSynchronizedWithCurrentItem="True" SelectedIndex="0"
                        SelectedValue="{Binding SelectedComboValue}"/>
                            <syncfusionshared:DateTimeEdit x:Name="PART_StartDateTimeEdit" Grid.Row="3" Margin="3" HorizontalAlignment="Stretch"
                                     HorizontalContentAlignment="Left" IsEmptyDateEnabled="true" TextAlignment="Left"
                                     DateTime="{Binding Path=StartDate, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                     NoneDateText="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.SelectFilterDate}}"/>
                            <syncfusionshared:DateTimeEdit x:Name="PART_EndDateTimeEdit" Grid.Row="4" Margin="3" HorizontalAlignment="Stretch"
                                     HorizontalContentAlignment="Left" IsEmptyDateEnabled="true" TextAlignment="Left"
                                     DateTime="{Binding Path=EndDate, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                     NoneDateText="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.FilterDateTo}}"
                                     Visibility="{Binding ElementName=PART_ComboBox, Path=SelectedValue, Converter={StaticResource VisiblityConverter}}"/>
                            <Button Name="PART_ClearButton" Grid.Row="5" Width="50" Height="20" Margin="3" HorizontalAlignment="Right"
                      Padding="0" Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Clear}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource GridDataDateTimeFilteringPaneStyle}"
         TargetType="{x:Type syncfusiongrid:GridDataDateTimeFilteringPane}"/>
    <Style x:Key="GridDataTextFilteringPaneStyle" TargetType="{x:Type syncfusiongrid:GridDataTextFilteringPane}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusiongrid:GridDataTextFilteringPane}">
                    <Border Width="230" Height="125" Background="{StaticResource Background}" BorderBrush="Gray"
                  BorderThickness="0.5" CornerRadius="0,4,0,4">
                        <Grid x:Name="LayoutRoot" Margin="5,0,5,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}"/>
                                <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}"/>
                                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>
                                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}"/>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}"/>
                                <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MetroToolTipStyle}"/>
                            </Grid.Resources>
                            <Button x:Name="PART_CloseButton" Grid.Row="0" Width="15" Height="15" Margin="0,2,-2,0"
                      HorizontalAlignment="Right" VerticalAlignment="Top" BorderBrush="White" BorderThickness="0"
                      Panel.ZIndex="1" Style="{StaticResource FilterPopUpCloseButtonStyle}" ToolTip="Close"/>
                            <Border Grid.Row="1" Margin="3">
                                <StackPanel Orientation="Horizontal">
                                    <RadioButton x:Name="PART_ORRadioButton" Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.OR}}"/>
                                    <RadioButton x:Name="PART_ANDRadioButton" Margin="10,0,0,0"
                               Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.AND}}"/>
                                    <CheckBox x:Name="PART_CaseCheckBox" Margin="10,0,0,0"
                            Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.MatchCase}}"/>
                                </StackPanel>
                            </Border>
                            <ComboBox Name="PART_ComboBox" Grid.Row="2" Margin="3" HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch" IsSynchronizedWithCurrentItem="True"
                        SelectedValue="{Binding SelectedComboValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Grid Row="3" Margin="3">
                                <TextBox Name="PART_TextBox" HorizontalContentAlignment="Left" Style="{StaticResource BlendTextBoxStyle}"
                         TextWrapping="Wrap"
                         Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"/>
                                <TextBlock HorizontalAlignment="Left" Foreground="{StaticResource BrushWatermarkForeground}"
                           IsHitTestVisible="false" Padding="4"
                           Text="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.EnterFilterValue}}"
                           Visibility="{Binding ElementName=PART_TextBox, Path=Text.IsEmpty, Converter={StaticResource booleanToVisibilityConverter}}"/>
                            </Grid>
                            <Button Name="PART_ClearButton" Grid.Row="4" Width="50" Height="20" Margin="3" HorizontalAlignment="Right"
                      Padding="0" Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Clear}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource GridDataTextFilteringPaneStyle}"
         TargetType="{x:Type syncfusiongrid:GridDataTextFilteringPane}"/>
    <Style x:Key="GridDataInt32SliderFilteringPaneStyle"
         TargetType="{x:Type syncfusiongrid:GridDataInt32SliderFilteringPane}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusiongrid:GridDataInt32SliderFilteringPane}">
                    <Border Width="250" Height="170" Background="{StaticResource Background}" BorderBrush="Gray"
                  BorderThickness="0.5" CornerRadius="0,4,0,4">
                        <Grid x:Name="LayoutRoot" Margin="5,0,5,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}"/>
                                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>
                                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}"/>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}"/>
                                <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}"/>
                                <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MetroToolTipStyle}"/>
                            </Grid.Resources>
                            <Button x:Name="PART_CloseButton" Grid.Row="0" Width="15" Height="15" Margin="0,2,-2,0"
                      HorizontalAlignment="Right" VerticalAlignment="Top" BorderBrush="White" BorderThickness="0"
                      Panel.ZIndex="1" Style="{StaticResource FilterPopUpCloseButtonStyle}" ToolTip="Close"/>
                            <Border Grid.Row="1" Margin="3">
                                <StackPanel Orientation="Horizontal">
                                    <RadioButton x:Name="PART_ORRadioButton" Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.OR}}"/>
                                    <RadioButton x:Name="PART_ANDRadioButton" Margin="10,0,0,0"
                               Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.AND}}"/>
                                </StackPanel>
                            </Border>
                            <ComboBox Name="PART_ComboBox" Grid.Row="2" Margin="3" HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch" IsSynchronizedWithCurrentItem="True" SelectedIndex="0"
                        SelectedValue="{Binding SelectedComboValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBlock Grid.Row="3" Margin="3" HorizontalAlignment="Left" VerticalAlignment="Center"
                         Foreground="{StaticResource XComponentFontBrush}" TextWrapping="Wrap"
                         Text="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.SlideToFilter}}"/>
                            <StackPanel Grid.Row="4" Margin="3">
                                <Slider Name="PART_Slider" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                        IsSnapToTickEnabled="{Binding IsSnapToTickEnabled, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Maximum="{Binding MaxValue, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Minimum="{Binding MinValue, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Value="{Binding Value, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <StackPanel Margin="3" Orientation="Horizontal">
                                    <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                             Foreground="{StaticResource XComponentFontBrush}" Text="FilteredValue : "/>
                                    <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                             Foreground="{StaticResource XComponentFontBrush}"
                             Text="{Binding Value, ElementName=PART_Slider, Converter={StaticResource DoubleToIntConverter}}"/>
                                </StackPanel>
                            </StackPanel>
                            <Button Name="PART_ClearButton" Grid.Row="5" Width="50" Height="20" Margin="3" HorizontalAlignment="Right"
                      Padding="0" Content="{Binding Source={x:Static syncfusiongrid:GridDataResourceWrapper.Clear}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource GridDataInt32SliderFilteringPaneStyle}"
         TargetType="{x:Type syncfusiongrid:GridDataInt32SliderFilteringPane}"/>
         
    <Style TargetType="{x:Type syncfusion:SfTextBoxExt}" BasedOn="{StaticResource {x:Type syncfusion:SfTextBoxExt}}">
        <Setter Property="Background" Value="{StaticResource XComponentTextboxBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource XComponentFontBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource XComponentTextboxBorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource MetroFontFamily}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="WatermarkTemplate" Value="{StaticResource WatermarkTemplate}"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type syncfusion:SfTextBoxExt}">
                    <Grid>
                        <Border x:Name="Bd" Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <ContentControl x:Name="PART_Watermark" Background="{TemplateBinding Background}" 
                                                ContentTemplate="{TemplateBinding WatermarkTemplate}" 
                                                Content="{TemplateBinding Watermark}" Foreground="{TemplateBinding Foreground}" 
                                                FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" 
                                                FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" 
                                                FontFamily="{TemplateBinding FontFamily}" IsHitTestVisible="False" IsTabStop="False" Margin="2,0,0,0" Opacity="0.5" 
                                                Padding="{TemplateBinding Padding}" Grid.Row="0" Visibility="{TemplateBinding Visibility}" VerticalAlignment="{TemplateBinding VerticalAlignment}" 
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <Popup x:Name="PART_Popup" StaysOpen="False" IsOpen="{TemplateBinding syncfusion:SfTextBoxExt.IsSuggestionOpen}">
                            <Grid>
                                <syncfusion:SuggestionBox x:Name="PART_SuggestionBox" BorderBrush="{TemplateBinding BorderBrush}" ItemsSource="{TemplateBinding syncfusion:SfTextBoxExt.Suggestions}"
                                                          MaxHeight="{TemplateBinding MaxDropDownHeight}" ScrollViewer.VerticalScrollBarVisibility="Auto"  
                                                          Background="{TemplateBinding syncfusion:SfTextBoxExt.Background}"
                                                          SelectedIndex="{Binding SuggestionIndex, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="syncfusion:SkinStorage.EnableTouch" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource XComponentSelectBrush}" Property="Control.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter Value="{StaticResource XComponentSelectBrush}" Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource XComponentInactiveTextboxBrush}" Property="Control.Background"/>
                            <Setter Value="{StaticResource XComponentInactiveFontBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="syncfusion:SkinStorage.EnableTouch" Value="true">
                            <Setter Property="Control.Padding" Value="1,9"/>
                            <Setter Property="Control.FontSize" Value="18"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>